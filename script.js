function interpolate(x, x1, x2, y1, y2) {
    let y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1;
    return y;
}
function xcalculator(x, x1, x2) {
    return (x - x1) / (x2 - x1);
}
function specific(vf, vfg, x) {
    return ((x * vfg) + vf);
}
function getUpperTemp(temperature) {
    let ready = temperature / 10;
    let bound = Math.round(ready);
    let upper = 0.0;
    let lower = 0.0;

    if ((ready - bound) > 0) {
        lower = bound * 10;
        upper = lower + 5;
    }
    else {
        upper = bound * 10;
        lower = upper - 5;
    }
    if (temperature <= 370)
        return upper;
    else
        return 373.95;
}
function getLowerTemp(temperature) {
    let ready = temperature / 10;
    let bound = Math.round(ready);
    let upper = 0.0;
    let lower = 0.0;

    if ((ready - bound) > 0) {
        lower = bound * 10;
        upper = lower + 5;
    }
    else {
        upper = bound * 10;
        lower = upper - 5;
    }
    if (temperature >= 5)
        return lower;
    else
        return 0.01;
}
function getLowerPressure(pressure) {
    let tbr = 0;
    // let round = Math.round(pressure);
    if (pressure <= 3) {
        if (round > pressure)
            tbr = round - 0.5;
        else
            tbr = round;
    }
    else if (pressure <= 5)
        tbr = Math.floor(pressure);
    else if (pressure <= 7.5)
        tbr = 5;
    else if (pressure <= 10)
        tbr = 7.5;
    else if (pressure <= 30)
        tbr = pressure - (pressure % 5);
    else if (pressure <= 50)
        tbr = pressure - (pressure % 10);
    else if (pressure <= 400)
        tbr = pressure - (pressure % 25);
    else if (pressure <= 1000)
        tbr = pressure - (pressure % 50);
    else if (pressure <= 1500)
        tbr = pressure - (pressure % 100);
    else if (pressure <= 2500)
        tbr = pressure - (pressure % 250);
    else if (pressure <= 4000)
        tbr = pressure - (pressure % 500);
    else if (pressure <= 22000)
        tbr = pressure - (pressure % 1000);
    else
        tbr = 22000;
    return tbr;
}

function getUpperPressure(pressure) {
    let tbr = 0;
    //let round= Math.round(pressure);
    if (pressure <= 3)
        tbr = pressure + (0.5 - pressure % 0.5);
    else if (pressure <= 5)
        tbr = Math.ceil(pressure);
    else if (pressure <= 7.5)
        tbr = 7.5;
    else if (pressure <= 10)
        tbr = 10;
    else if (pressure <= 30)
        tbr = pressure - pressure % 5 + 5;
    else if (pressure <= 50)
        tbr = pressure - pressure % 10 + 10;
    else if (pressure <= 400)
        tbr = pressure - pressure % 25 + 25;
    else if (pressure <= 1000)
        tbr = pressure - pressure % 50 + 50;
    else if (pressure <= 1500)
        tbr = pressure - pressure % 100 + 100;
    else if (pressure <= 2500)
        tbr = pressure - pressure % 250 + 250;
    else if (pressure <= 4000)
        tbr = pressure - pressure % 500 + 500;
    else if (pressure <= 22000)
        tbr = pressure - pressure % 1000 + 1000;
    else
        tbr = 22064;
    return tbr;
}

const tp = new Map([
    [0.01, 0.6117],
    [5.0, 0.8725],
    [10.0, 1.2281],
    [15.0, 1.7057],
    [20.0, 2.3392],
    [25.0, 3.1698],
    [30.0, 4.2469],
    [35.0, 5.6291],
    [40.0, 7.3851],
    [45.0, 9.5953],
    [50.0, 12.352],
    [55.0, 15.763],
    [60.0, 19.947],
    [65.0, 25.043],
    [70.0, 31.202],
    [75.0, 38.597],
    [80.0, 47.416],
    [85.0, 57.868],
    [90.0, 70.183],
    [95.0, 84.609],
    [100.0, 101.42],
    [105.0, 120.90],
    [110.0, 143.38],
    [115.0, 169.18],
    [120.0, 198.67],
    [125.0, 232.23],
    [130.0, 270.28],
    [135.0, 313.22],
    [140.0, 361.53],
    [145.0, 415.68],
    [150.0, 476.16],
    [155.0, 543.49],
    [160.0, 618.23],
    [165.0, 700.93],
    [170.0, 792.18],
    [175.0, 892.60],
    [180.0, 1002.8],
    [185.0, 1123.5],
    [190.0, 1255.2],
    [195.0, 1398.8],
    [200.0, 1554.9],
    [205.0, 1724.3],
    [210.0, 1907.7],
    [215.0, 2105.9],
    [220.0, 2319.6],
    [225.0, 2549.7],
    [230.0, 2797.1],
    [235.0, 3062.6],
    [240.0, 3347.0],
    [245.0, 3651.2],
    [250.0, 3976.2],
    [255.0, 4322.9],
    [260.0, 4692.3],
    [265.0, 5085.3],
    [270.0, 5503.0],
    [275.0, 5946.4],
    [280.0, 6416.6],
    [285.0, 6914.6],
    [290.0, 7441.8],
    [295.0, 7999.0],
    [300.0, 8587.9],
    [305.0, 9209.4],
    [310.0, 9865.0],
    [315.0, 10556.0],
    [320.0, 11284.0],
    [325.0, 12051.0],
    [330.0, 12858.0],
    [335.0, 13707.0],
    [340.0, 14601.0],
    [345.0, 15541.0],
    [350.0, 16529.0],
    [355.0, 17570.0],
    [360.0, 18666.0],
    [365.0, 19822.0],
    [370.0, 21044.0],
    [373.9, 22064.0],
]);

const tv = new Map([
    [0.01, [0.001000, 206.00]],
    [5.0, [0.001000, 147.03]],
    [10.0, [0.001000, 106.32]],
    [15.0, [0.001001, 77.885]],
    [20.0, [0.001002, 57.762]],
    [25.0, [0.001003, 43.340]],
    [30.0, [0.001004, 32.879]],
    [35.0, [0.001006, 25.205]],
    [40.0, [0.001008, 19.515]],
    [45.0, [0.001010, 15.251]],
    [50.0, [0.001012, 12.026]],
    [55.0, [0.001015, 9.5639]],
    [60.0, [0.001017, 7.6670]],
    [65.0, [0.001020, 6.1935]],
    [70.0, [0.001023, 5.0396]],
    [75.0, [0.001026, 4.1291]],
    [80.0, [0.001029, 3.4053]],
    [85.0, [0.001032, 2.8261]],
    [90.0, [0.001036, 2.3593]],
    [95.0, [0.001040, 1.9808]],
    [100.0, [0.001043, 1.6720]],
    [105.0, [0.001047, 1.4186]],
    [110.0, [0.001052, 1.2094]],
    [115.0, [0.001056, 1.0360]],
    [120.0, [0.001060, 0.89133]],
    [125.0, [0.001065, 0.77012]],
    [130.0, [0.001070, 0.66808]],
    [135.0, [0.001075, 0.58179]],
    [140.0, [0.001080, 0.50850]],
    [145.0, [0.001085, 0.44600]],
    [150.0, [0.001091, 0.39248]],
    [155.0, [0.001096, 0.34648]],
    [160.0, [0.001102, 0.30680]],
    [165.0, [0.001108, 0.27244]],
    [170.0, [0.001114, 0.24260]],
    [175.0, [0.001121, 0.21659]],
    [180.0, [0.001127, 0.19384]],
    [185.0, [0.001134, 0.17390]],
    [190.0, [0.001141, 0.15636]],
    [195.0, [0.001149, 0.14089]],
    [200.0, [0.001157, 0.12721]],
    [205.0, [0.001164, 0.11508]],
    [210.0, [0.001173, 0.10429]],
    [215.0, [0.001181, 0.094680]],
    [220.0, [0.001190, 0.086094]],
    [225.0, [0.001199, 0.078405]],
    [230.0, [0.001209, 0.071505]],
    [235.0, [0.001219, 0.065300]],
    [240.0, [0.001229, 0.059707]],
    [245.0, [0.001240, 0.054656]],
    [250.0, [0.001252, 0.050085]],
    [255.0, [0.001263, 0.045941]],
    [260.0, [0.001276, 0.042175]],
    [265.0, [0.001289, 0.038748]],
    [270.0, [0.001303, 0.035622]],
    [275.0, [0.001317, 0.032767]],
    [280.0, [0.001333, 0.030153]],
    [285.0, [0.001349, 0.027756]],
    [290.0, [0.001366, 0.025554]],
    [295.0, [0.001384, 0.023528]],
    [300.0, [0.001404, 0.021659]],
    [305.0, [0.001425, 0.019932]],
    [310.0, [0.001447, 0.018333]],
    [315.0, [0.001472, 0.016849]],
    [320.0, [0.001499, 0.015470]],
    [325.0, [0.001528, 0.014183]],
    [330.0, [0.001560, 0.012979]],
    [335.0, [0.001597, 0.011848]],
    [340.0, [0.001638, 0.010783]],
    [345.0, [0.001685, 0.009772]],
    [350.0, [0.001741, 0.008806]],
    [355.0, [0.001808, 0.007872]],
    [360.0, [0.001895, 0.006950]],
    [365.0, [0.002015, 0.006009]],
    [370.0, [0.002217, 0.004953]],
    [373.95, [0.003106, 0.003106]],
]);

const tu = new Map([
    [0.01, [0.000, 2374.9]],
    [5.0, [21.019, 2381.8]],
    [10.0, [42.020, 2388.7]],
    [15.0, [62.980, 2395.5]],
    [20.0, [83.913, 2402.3]],
    [25.0, [104.83, 2409.1]],
    [30.0, [125.73, 2415.9]],
    [35.0, [146.63, 2422.7]],
    [40.0, [167.53, 2429.4]],
    [45.0, [188.43, 2436.1]],
    [50.0, [209.33, 2442.7]],
    [55.0, [230.24, 2449.3]],
    [60.0, [251.16, 2455.9]],
    [65.0, [272.09, 2462.4]],
    [70.0, [293.04, 2468.9]],
    [75.0, [313.99, 2475.3]],
    [80.0, [334.97, 2481.6]],
    [85.0, [355.96, 2487.8]],
    [90.0, [376.97, 2494.0]],
    [95.0, [398.00, 2500.1]],
    [100.0, [419.06, 2506.0]],
    [105.0, [440.15, 2511.9]],
    [110.0, [461.27, 2517.7]],
    [115.0, [482.42, 2523.3]],
    [120.0, [503.60, 2528.9]],
    [125.0, [524.83, 2534.3]],
    [130.0, [546.10, 2539.5]],
    [135.0, [567.41, 2544.7]],
    [140.0, [588.77, 2549.6]],
    [145.0, [610.19, 2554.4]],
    [150.0, [631.66, 2559.1]],
    [155.0, [653.19, 2563.5]],
    [160.0, [674.79, 2567.8]],
    [165.0, [696.46, 2571.9]],
    [170.0, [718.20, 2575.7]],
    [175.0, [740.02, 2579.4]],
    [180.0, [761.92, 2582.8]],
    [185.0, [783.91, 2586.0]],
    [190.0, [806.00, 2589.0]],
    [195.0, [828.18, 2591.7]],
    [200.0, [850.46, 2594.2]],
    [205.0, [872.86, 2596.4]],
    [210.0, [895.38, 2598.3]],
    [215.0, [918.02, 2599.9]],
    [220.0, [940.79, 2601.3]],
    [225.0, [963.70, 2602.3]],
    [230.0, [986.76, 2602.9]],
    [240.0, [1033.4, 2603.1]],
    [245.0, [1056.9, 2602.7]],
    [250.0, [1080.7, 2601.8]],
    [255.0, [1104.7, 2600.5]],
    [260.0, [1128.8, 2598.7]],
    [265.0, [1153.3, 2596.5]],
    [270.0, [1177.9, 2593.7]],
    [275.0, [1202.9, 2590.3]],
    [280.0, [1228.2, 2586.4]],
    [285.0, [1253.7, 2581.8]],
    [290.0, [1279.7, 2576.5]],
    [295.0, [1306.0, 2570.5]],
    [300.0, [1332.7, 2563.6]],
    [305.0, [1360.0, 2555.8]],
    [310.0, [1387.7, 2547.1]],
    [315.0, [1416.1, 2537.2]],
    [320.0, [1445.1, 2526.0]],
    [325.0, [1475.0, 2513.4]],
    [330.0, [1505.7, 2499.2]],
    [335.0, [1537.5, 2483.0]],
    [340.0, [1570.7, 2464.5]],
    [345.0, [1605.5, 2443.2]],
    [350.0, [1642.4, 2418.3]],
    [355.0, [1682.2, 2388.6]],
    [360.0, [1726.2, 2351.9]],
    [365.0, [1777.2, 2303.6]],
    [370.0, [1844.5, 2230.1]],
    [373.95, [2015.7, 2015.7]],
]);

const th = new Map([
    [0.01, [0.001, 2500.9]],
    [5.0, [21.020, 2510.1]],
    [10.0, [42.022, 2519.2]],
    [15.0, [62.982, 2528.3]],
    [20.0, [83.915, 2537.4]],
    [25.0, [104.83, 2546.5]],
    [30.0, [125.74, 2555.6]],
    [35.0, [146.64, 2564.6]],
    [40.0, [167.53, 2573.5]],
    [45.0, [188.44, 2582.4]],
    [50.0, [209.34, 2591.3]],
    [55.0, [230.26, 2600.1]],
    [60.0, [251.18, 2608.8]],
    [65.0, [272.12, 2617.5]],
    [70.0, [293.07, 2626.1]],
    [75.0, [314.03, 2634.6]],
    [80.0, [335.02, 2643.0]],
    [85.0, [356.02, 2651.4]],
    [90.0, [377.04, 2659.6]],
    [95.0, [398.09, 2667.6]],
    [100.0, [419.17, 2675.6]],
    [105.0, [440.28, 2683.4]],
    [110.0, [461.42, 2691.1]],
    [115.0, [482.59, 2698.6]],
    [120.0, [503.81, 2706.0]],
    [125.0, [525.07, 2713.1]],
    [130.0, [546.38, 2720.1]],
    [135.0, [567.75, 2726.9]],
    [145.0, [610.64, 2739.8]],
    [150.0, [632.18, 2745.9]],
    [155.0, [653.79, 2751.8]],
    [160.0, [675.47, 2757.5]],
    [165.0, [697.24, 2762.8]],
    [170.0, [719.08, 2767.9]],
    [175.0, [741.02, 2772.7]],
    [180.0, [763.05, 2777.2]],
    [185.0, [785.19, 2781.4]],
    [195.0, [829.78, 2788.8]],
    [200.0, [852.26, 2792.0]],
    [205.0, [874.87, 2794.8]],
    [210.0, [897.61, 2797.3]],
    [215.0, [920.5, 2799.3]],
    [220.0, [943.55, 2801.0]],
    [225.0, [966.76, 2802.2]],
    [230.0, [990.14, 2802.9]],
    [235.0, [1013.7, 2803.2]],
    [240.0, [1037.5, 2803.0]],
    [245.0, [1061.5, 2802.2]],
    [250.0, [1085.7, 2801.0]],
    [255.0, [1110.1, 2799.1]],
    [260.0, [1134.8, 2796.6]],
    [265.0, [1159.8, 2793.5]],
    [270.0, [1185.1, 2789.7]],
    [275.0, [1210.7, 2785.2]],
    [280.0, [1236.7, 2779.9]],
    [285.0, [1263.1, 2773.7]],
    [290.0, [1289.8, 2766.7]],
    [295.0, [1317.1, 2758.7]],
    [300.0, [1344.8, 2749.6]],
    [305.0, [1373.1, 2739.4]],
    [310.0, [1402.0, 2727.9]],
    [315.0, [1431.6, 2715.0]],
    [320.0, [1462.0, 2700.6]],
    [325.0, [1493.4, 2684.3]],
    [330.0, [1525.8, 2666.0]],
    [335.0, [1559.4, 2645.4]],
    [340.0, [1594.6, 2622.0]],
    [345.0, [1631.7, 2595.1]],
    [350.0, [1671.2, 2563.9]],
    [355.0, [1714.0, 2526.9]],
    [360.0, [1761.5, 2481.6]],
    [365.0, [1817.2, 2422.7]],
    [370.0, [1891.2, 2334.3]],
    [373.95, [2084.3, 2084.3]],
]);

const ts = new Map([
    [0.01, [0.0000, 9.1556]],
    [5.0, [0.0763, 9.0249]],
    [10.0, [0.1511, 8.8999]],
    [15.0, [0.2245, 8.7803]],
    [20.0, [0.2965, 8.6661]],
    [25.0, [0.3672, 8.4520]],
    [30.0, [0.4368, 8.4520]],
    [35.0, [0.5051, 8.3517]],
    [40.0, [0.5724, 8.2556]],
    [45.0, [0.6386, 8.1633]],
    [50.0, [0.7038, 8.0748]],
    [55.0, [0.7680, 7.9898]],
    [60.0, [0.8313, 7.9082]],
    [65.0, [0.8937, 7.8296]],
    [70.0, [0.9551, 7.7540]],
    [75.0, [1.0158, 7.6812]],
    [80.0, [1.0756, 7.6111]],
    [85.0, [1.1346, 7.5435]],
    [90.0, [1.1929, 7.4151]],
    [100.0, [1.3072, 7.3542]],
    [105.0, [1.3634, 7.2952]],
    [110.0, [1.4188, 7.2382]],
    [115.0, [1.4737, 7.1829]],
    [120.0, [1.5279, 7.1292]],
    [125.0, [1.5816, 7.0771]],
    [130.0, [1.6346, 7.0265]],
    [135.0, [1.6872, 6.9773]],
    [140.0, [1.7392, 6.9294]],
    [145.0, [1.7908, 6.8827]],
    [150.0, [1.8418, 6.8371]],
    [155.0, [1.8924, 6.7927]],
    [160.0, [1.9426, 6.7492]],
    [165.0, [1.9923, 6.7067]],
    [170.0, [2.0417, 6.6650]],
    [175.0, [2.0906, 6.6242]],
    [180.0, [2.1392, 6.5841]],
    [185.0, [2.1875, 6.5447]],
    [190.0, [2.2355, 6.5059]],
    [195.0, [2.2831, 6.4678]],
    [200.0, [2.3305, 6.4302]],
    [205.0, [2.3776, 6.3930]],
    [210.0, [2.4245, 6.3563]],
    [215.0, [2.4712, 6.3200]],
    [220.0, [2.5176, 6.2840]],
    [225.0, [2.5639, 6.2483]],
    [230.0, [2.6100, 6.2128]],
    [235.0, [2.6560, 6.1775]],
    [240.0, [2.7018, 6.1424]],
    [245.0, [2.7476, 6.1072]],
    [250.0, [2.7933, 6.0721]],
    [255.0, [2.8390, 6.0369]],
    [260.0, [2.8847, 6.0017]],
    [265.0, [2.9304, 5.9662]],
    [270.0, [2.9762, 5.9305]],
    [275.0, [3.0221, 5.8944]],
    [280.0, [3.0681, 5.8579]],
    [285.0, [3.1144, 5.8210]],
    [290.0, [3.1608, 5.7834]],
    [295.0, [3.2076, 5.7450]],
    [300.0, [3.2548, 5.7059]],
    [305.0, [3.3024, 5.6657]],
    [310.0, [3.3506, 5.6243]],
    [315.0, [3.3994, 5.5816]],
    [320.0, [3.4491, 5.5372]],
    [325.0, [3.4998, 5.4908]],
    [330.0, [3.5516, 5.4422]],
    [335.0, [3.6050, 5.390]],
    [340.0, [3.6602, 5.3358]],
    [345.0, [3.7179, 5.2765]],
    [350.0, [3.7788, 5.2114]],
    [355.0, [3.8442, 5.1384]],
    [360.0, [3.9165, 5.0537]],
    [365.0, [4.0004, 4.9493]],
    [370.0, [4.1119, 4.8009]],
    [373.95, [4.4070, 4.4070]],
]);

const pt = new Map([
    [1.0, 6.97],
    [1.5, 13.02],
    [2.0, 17.50],
    [2.5, 21.08],
    [3.0, 24.08],
    [4.0, 28.96],
    [5.0, 32.87],
    [7.5, 40.29],
    [10.0, 45.81],
    [15.0, 53.97],
    [20.0, 60.06],
    [25.0, 64.96],
    [30.0, 69.09],
    [40.0, 75.86],
    [50.0, 81.32],
    [75.0, 91.76],
    [100.0, 99.61],
    [101.325, 99.97],
    [125.0, 105.97],
    [150.0, 111.35],
    [175.0, 116.04],
    [200.0, 120.21],
    [225.0, 123.97],
    [250.0, 127.41],
    [275.0, 130.58],
    [300.0, 133.52],
    [325.0, 136.27],
    [350.0, 138.86],
    [375.0, 141.30],
    [400.0, 143.61],
    [450.0, 147.90],
    [500.0, 151.83],
    [550.0, 155.46],
    [600.0, 158.83],
    [650.0, 161.98],
    [700.0, 164.95],
    [750.0, 167.75],
    [800.0, 170.41],
    [850.0, 172.94],
    [900.0, 175.35],
    [950.0, 177.66],
    [1000.0, 179.88],
    [1100.0, 184.06],
    [1200.0, 187.96],
    [1300.0, 191.60],
    [1400.0, 195.04],
    [1500.0, 198.29],
    [1750.0, 205.72],
    [2000.0, 212.38],
    [2250.0, 218.41],
    [2500.0, 223.95],
    [3000.0, 233.85],
    [3500.0, 242.56],
    [4000.0, 250.35],
    [5000.0, 263.94],
    [6000.0, 275.59],
    [7000.0, 285.83],
    [8000.0, 295.01],
    [9000.0, 303.35],
    [10000.0, 311.00],
    [11000.0, 318.08],
    [12000.0, 324.68],
    [13000.0, 330.85],
    [14000.0, 336.67],
    [15000.0, 342.16],
    [16000.0, 347.36],
    [17000.0, 352.29],
    [18000.0, 356.99],
    [19000.0, 361.47],
    [20000.0, 365.75],
    [21000.0, 369.83],
    [22000.0, 373.71],
    [22064.0, 373.95],

]);

// console.log(pt.get(300));

const pv = new Map([
    [1.0, [0.001000, 129.19]],
    [1.5, [0.001001, 87.964]],
    [2.0, [0.001001, 66.990]],
    [2.5, [0.001002, 54.242]],
    [3.0, [0.001003, 45.654]],
    [4.0, [0.001004, 34.791]],
    [5.0, [0.001005, 28.185]],
    [7.5, [0.001008, 19.233]],
    [10.0, [0.001010, 14.670]],
    [15.0, [0.001014, 10.020]],
    [20.0, [0.001017, 7.6481]],
    [25.0, [0.001020, 6.2034]],
    [30.0, [0.001022, 5.2287]],
    [40.0, [0.001026, 3.9933]],
    [50.0, [0.001030, 3.2403]],
    [75.0, [0.001037, 2.2172]],
    [100.0, [0.001043, 1.6941]],
    [101.325, [0.001043, 1.6734]],
    [125.0, [0.001048, 1.3750]],
    [150.0, [0.001053, 1.1594]],
    [175.0, [0.001057, 1.0037]],
    [200.0, [0.001061, 0.88578]],
    [225.0, [0.001064, 0.79329]],
    [250.0, [0.001067, 0.71873]],
    [275.0, [0.001070, 0.65732]],
    [300.0, [0.001073, 0.60582]],
    [325.0, [0.001076, 0.56199]],
    [350.0, [0.001079, 0.52422]],
    [375.0, [0.001081, 0.49133]],
    [400.0, [0.001084, 0.46242]],
    [450.0, [0.001088, 0.41392]],
    [500.0, [0.001093, 0.37483]],
    [550.0, [0.001097, 0.34261]],
    [600.0, [0.001101, 0.31560]],
    [650.0, [0.001104, 0.29260]],
    [700.0, [0.001108, 0.27278]],
    [750.0, [0.001111, 0.25552]],
    [800.0, [0.001115, 0.24035]],
    [900.0, [0.001121, 0.21489]],
    [950.0, [0.001124, 0.20411]],
    [1000.0, [0.001127, 0.19436]],
    [1100.0, [0.001133, 0.17745]],
    [1200.0, [0.001138, 0.16326]],
    [1300.0, [0.001144, 0.15119]],
    [1400.0, [0.001149, 0.14078]],
    [1500.0, [0.001154, 0.13171]],
    [1750.0, [0.001166, 0.11344]],
    [2000.0, [0.001177, 0.099587]],
    [2250.0, [0.001187, 0.08871]],
    [2500.0, [0.001197, 0.079952]],
    [3000.0, [0.001217, 0.066667]],
    [3500.0, [0.001235, 0.057061]],
    [4000.0, [0.001252, 0.049779]],
    [5000.0, [0.001286, 0.039448]],
    [6000.0, [0.001319, 0.032449]],
    [7000.0, [0.001352, 0.027378]],
    [8000.0, [0.001384, 0.023525]],
    [9000.0, [0.001418, 0.020489]],
    [10000.0, [0.001452, 0.018028]],
    [11000.0, [0.001488, 0.015988]],
    [12000.0, [0.001526, 0.014264]],
    [13000.0, [0.001566, 0.012781]],
    [14000.0, [0.001610, 0.011487]],
    [15000.0, [0.001657, 0.010341]],
    [16000.0, [0.001710, 0.009312]],
    [17000.0, [0.001770, 0.008374]],
    [18000.0, [0.001840, 0.007504]],
    [19000.0, [0.001926, 0.006677]],
    [20000.0, [0.002038, 0.005862]],
    [21000.0, [0.002207, 0.004994]],
    [22000.0, [0.002703, 0.003644]],
    [22064.0, [0.003106, 0.003106]],
]);

const pu = new Map([

    [1.0, [29.302, 2384.5]],
    [1.5, [54.686, 2392.8]],
    [2.0, [73.431, 2398.9]],
    [2.5, [88.422, 2403.8]],
    [3.0, [100.98, 2407.9]],
    [4.0, [121.39, 2414.5]],
    [5.0, [137.75, 2419.8]],
    [7.5, [168.74, 2429.8]],
    [10.0, [191.79, 2437.2]],
    [15.0, [225.93, 2448.0]],
    [20.0, [251.40, 2456.0]],
    [25.0, [271.93, 2462.4]],
    [30.0, [289.24, 2467.7]],
    [40.0, [317.58, 2476.3]],
    [50.0, [340.49, 2483.2]],
    [75.0, [384.36, 2496.1]],
    [100.0, [417.40, 2505.6]],
    [101.325, [418.95, 2506.0]],
    [125.0, [444.23, 2513.0]],
    [150.0, [466.97, 2519.2]],
    [175.0, [486.82, 2524.5]],
    [200.0, [504.50, 2529.1]],
    [225.0, [520.47, 2533.2]],
    [250.0, [535.08, 2536.8]],
    [275.0, [548.57, 2540.1]],
    [300.0, [561.11, 2543.2]],
    [325.0, [572.84, 2545.9]],
    [350.0, [583.89, 2548.5]],
    [375.0, [594.32, 2550.9]],
    [400.0, [604.22, 2553.1]],
    [450.0, [622.65, 2557.1]],
    [500.0, [639.54, 2560.7]],
    [550.0, [655.16, 2563.9]],
    [600.0, [669.72, 2566.8]],
    [650.0, [683.37, 2569.4]],
    [700.0, [696.23, 2571.8]],
    [750.0, [708.40, 2574.0]],
    [800.0, [719.97, 2576.0]],
    [850.0, [731.00, 2577.9]],
    [900.0, [741.55, 2579.6]],
    [950.0, [751.67, 2581.3]],
    [1000.0, [761.39, 2582.8]],
    [1100.0, [779.78, 2585.5]],
    [1200.0, [796.96, 2587.8]],
    [1300.0, [813.10, 2589.9]],
    [1400.0, [828.35, 2591.8]],
    [1500.0, [842.82, 2593.4]],
    [1750.0, [876.12, 2596.7]],
    [2000.0, [906.12, 2599.1]],
    [2250.0, [933.54, 2600.9]],
    [2500.0, [958.87, 2602.1]],
    [3000.0, [1004.6, 2603.2]],
    [3500.0, [1045.4, 2603.0]],
    [4000.0, [1082.4, 2601.7]],
    [5000.0, [1148.1, 2597.0]],
    [6000.0, [1205.8, 2589.9]],
    [7000.0, [1258.0, 2581.0]],
    [8000.0, [1306.0, 2570.5]],
    [9000.0, [1350.9, 2558.5]],
    [10000.0, [1393.3, 2545.2]],
    [11000.0, [1433.9, 2530.4]],
    [12000.0, [1473.0, 2514.3]],
    [13000.0, [1511.0, 2496.6]],
    [14000.0, [1548.4, 2477.1]],
    [15000.0, [1585.5, 2455.7]],
    [16000.0, [1622.6, 2432.0]],
    [17000.0, [1660.2, 2405.4]],
    [18000.0, [1699.1, 2375.0]],
    [19000.0, [1740.3, 2339.2]],
    [20000.0, [1785.8, 2294.8]],
    [21000.0, [1841.6, 2233.5]],
    [22000.0, [1951.7, 2092.4]],
    [22064.0, [2015.7, 2015.7]],

]);

const ph = new Map([
    [1.0, [29.303, 2513.7]],
    [1.5, [54.688, 2524.7]],
    [2.0, [73.433, 2532.9]],
    [2.5, [88.424, 2539.4]],
    [3.0, [100.98, 2544.8]],
    [4.0, [121.39, 2553.7]],
    [5.0, [137.75, 2560.7]],
    [7.5, [168.75, 2574.0]],
    [10.0, [191.81, 2583.9]],
    [15.0, [225.94, 2598.3]],
    [20.0, [251.42, 2608.9]],
    [25.0, [271.96, 2617.5]],
    [30.0, [289.27, 2624.6]],
    [40.0, [317.62, 2636.]],
    [50.0, [340.54, 2645.]],
    [75.0, [384.44, 2662.4]],
    [100.0, [417.51, 2675.0]],
    [101.325, [419.06, 2675.6]],
    [125.0, [444.36, 2684.9]],
    [150.0, [467.13, 2693.1]],
    [175.0, [487.01, 2700.2]],
    [200.0, [504.71, 2706.3]],
    [225.0, [520.71, 2711.7]],
    [250.0, [535.35, 2716.5]],
    [275.0, [548.86, 2720.9]],
    [300.0, [561.43, 2724.9]],
    [325.0, [573.19, 2728.6]],
    [350.0, [584.26, 2732.0]],
    [375.0, [594.73, 2735.1]],
    [400.0, [604.66, 2738.1]],
    [450.0, [623.14, 2743.4]],
    [500.0, [640.09, 2748.1]],
    [550.0, [655.77, 2752.4]],
    [600.0, [670.38, 2756.2]],
    [650.0, [684.08, 2759.6]],
    [700.0, [697.00, 2762.8]],
    [750.0, [709.24, 2765.7]],
    [800.0, [720.87, 2768.3]],
    [850.0, [731.95, 2770.8]],
    [900.0, [742.56, 2773.0]],
    [950.0, [752.74, 2775.2]],
    [1000.0, [762.51, 2777.1]],
    [1100.0, [781.03, 2780.7]],
    [1200.0, [798.33, 2783.8]],
    [1300.0, [814.59, 2786.5]],
    [1400.0, [829.96, 2788.9]],
    [1500.0, [844.55, 2791.0]],
    [1750.0, [878.16, 2795.2]],
    [2000.0, [908.47, 2798.3]],
    [2250.0, [936.21, 2800.5]],
    [2500.0, [961.87, 2801.9]],
    [3000.0, [1008.3, 2803.2]],
    [3500.0, [1049.7, 2802.7]],
    [4000.0, [1087.4, 2800.8]],
    [5000.0, [1154.5, 2794.2]],
    [6000.0, [1213.8, 2784.6]],
    [7000.0, [1267.5, 2772.6]],
    [8000.0, [1317.1, 2758.7]],
    [9000.0, [1363.7, 2742.9]],
    [10000.0, [1407.8, 2725.5]],
    [11000.0, [1450.2, 2706.3]],
    [12000.0, [1491.3, 2685.4]],
    [13000.0, [1531.4, 2662.7]],
    [14000.0, [1571.0, 2637.9]],
    [15000.0, [1610.3, 2610.8]],
    [16000.0, [1649.9, 2581.0]],
    [17000.0, [1690.3, 2547.7]],
    [18000.0, [1732.2, 2510.0]],
    [19000.0, [1776.8, 2466.0]],
    [20000.0, [1826.6, 2412.1]],
    [21000.0, [1888.0, 2338.4]],
    [22000.0, [2011.1, 2172.6]],
    [22064.0, [2084.3, 2084.3]],

]);


const ps = new Map([
    [1.0, [0.1059, 8.9749]],
    [1.5, [0.1956, 8.8270]],
    [2.0, [0.2606, 8.7227]],
    [2.5, [0.3118, 8.6421]],
    [3.0, [0.3543, 8.5765]],
    [4.0, [0.4224, 8.4734]],
    [5.0, [0.4762, 8.3938]],
    [7.5, [0.5763, 8.2501]],
    [10.0, [0.6492, 8.1488]],
    [15.0, [0.7549, 8.0071]],
    [20.0, [0.8320, 7.9073]],
    [25.0, [0.8932, 7.8302]],
    [30.0, [0.9441, 7.7675]],
    [40.0, [1.0261, 7.6691]],
    [50.0, [1.0912, 7.5931]],
    [75.0, [1.2132, 7.4558]],
    [100.0, [1.3028, 7.3589]],
    [101.325, [1.3069, 7.3545]],
    [125.0, [1.3741, 7.2841]],
    [150.0, [1.4337, 7.2231]],
    [175.0, [1.4850, 7.1716]],
    [200.0, [1.5302, 7.1270]],
    [225.0, [1.5706, 7.0877]],
    [250.0, [1.6072, 7.0525]],
    [275.0, [1.6408, 7.0207]],
    [300.0, [1.6717, 6.9917]],
    [325.0, [1.7005, 6.9650]],
    [350.0, [1.7274, 6.9402]],
    [375.0, [1.7526, 6.9171]],
    [400.0, [1.7765, 6.8955]],
    [450.0, [1.8205, 6.8561]],
    [500.0, [1.8604, 6.8207]],
    [550.0, [1.8970, 6.7886]],
    [600.0, [1.9308, 6.7593]],
    [650.0, [1.9623, 6.7322]],
    [700.0, [1.9918, 6.7071]],
    [750.0, [2.0195, 6.6837]],
    [800.0, [2.0457, 6.6616]],
    [850.0, [2.0705, 6.6409]],
    [900.0, [2.0941, 6.6213]],
    [950.0, [2.1166, 6.6027]],
    [1000.0, [2.1381, 6.5850]],
    [1100.0, [2.1785, 6.5520]],
    [1200.0, [2.2159, 6.5217]],
    [1300.0, [2.2508, 6.4936]],
    [1400.0, [2.2835, 6.4675]],
    [1500.0, [2.3143, 6.4430]],
    [1750.0, [2.3844, 6.3877]],
    [2000.0, [2.4467, 6.3390]],
    [2250.0, [2.5029, 6.2954]],
    [2500.0, [2.5542, 6.2558]],
    [3000.0, [2.6454, 6.1856]],
    [3500.0, [2.7253, 6.1244]],
    [4000.0, [2.7966, 6.0696]],
    [5000.0, [2.9207, 5.9737]],
    [6000.0, [3.0275, 5.8902]],
    [7000.0, [3.1220, 5.8148]],
    [8000.0, [3.2077, 5.7450]],
    [9000.0, [3.2866, 5.6791]],
    [10000.0, [3.3603, 5.6159]],
    [11000.0, [3.4299, 5.5544]],
    [12000.0, [3.4964, 5.4939]],
    [13000.0, [3.5606, 5.4336]],
    [14000.0, [3.6232, 5.3728]],
    [15000.0, [3.6848, 5.3108]],
    [16000.0, [3.7461, 5.2466]],
    [17000.0, [3.8082, 5.1791]],
    [18000.0, [3.8720, 5.1064]],
    [19000.0, [3.9396, 5.0256]],
    [20000.0, [4.0146, 4.9310]],
    [21000.0, [4.1071, 4.8076]],
    [22000.0, [4.2942, 4.5439]],
    [22064.0, [4.4070, 4.4070]],

]);


//vf vg uf ufg down here 


const vu = [
    [0.001000, 206.00, 0.000, 2374.9],
    [0.001000, 147.03, 21.019, 2360.8],
    [0.001000, 106.32, 42.020, 2346.6],
    [0.001001, 77.885, 62.980, 2332.5],
    [0.001002, 57.762, 83.913, 2318.4],
    [0.001003, 43.340, 104.83, 2304.3],
    [0.001004, 32.879, 125.73, 2290.2],
    [0.001006, 25.205, 146.63, 2276.0],
    [0.001008, 19.515, 167.53, 2261.9],
    [0.001010, 15.251, 188.43, 2247.7],
    [0.001012, 12.026, 209.33, 2233.4],
    [0.001015, 9.5639, 230.24, 2219.1],
    [0.001017, 7.6670, 251.16, 2204.7],
    [0.001020, 6.1935, 272.09, 2190.3],
    [0.001023, 5.0396, 293.04, 2175.8],
    [0.001026, 4.1291, 313.99, 2161.3],
    [0.001029, 3.4053, 334.97, 2146.6],
    [0.001032, 2.8261, 355.96, 2131.9],
    [0.001036, 2.3593, 376.97, 2117.0],
    [0.001040, 1.9808, 398.00, 2102.0],
    [0.001043, 1.6720, 419.06, 2087.0],
    [0.001047, 1.4186, 440.15, 2071.8],
    [0.001052, 1.2094, 461.27, 2056.4],
    [0.001056, 1.0360, 482.42, 2040.9],
    [0.001060, 0.89133, 503.60, 2025.3],
    [0.001065, 0.77012, 524.83, 2009.5],
    [0.001070, 0.66808, 546.10, 1993.4],
    [0.001075, 0.58179, 567.41, 1977.3],
    [0.001080, 0.50850, 588.77, 1960.9],
    [0.001085, 0.44600, 610.19, 1944.2],
    [0.001091, 0.39248, 631.66, 1927.4],
    [0.001096, 0.34648, 653.19, 1910.3],
    [0.001102, 0.30680, 674.79, 1893.0],
    [0.001108, 0.27244, 696.46, 1875.4],
    [0.001114, 0.24260, 718.20, 1857.5],
    [0.001121, 0.21659, 740.02, 1839.4],
    [0.001127, 0.19384, 761.92, 1820.9],
    [0.001134, 0.17390, 783.91, 1802.1],
    [0.001141, 0.15636, 806.00, 1783.0],
    [0.001149, 0.14089, 828.18, 1763.6],
    [0.001157, 0.12721, 850.46, 1743.7],
    [0.001164, 0.11508, 872.86, 1723.5],
    [0.001173, 0.10429, 895.38, 1702.9],
    [0.001181, 0.094680, 918.02, 1681.9],
    [0.001190, 0.086094, 940.79, 1660.5],
    [0.001199, 0.078405, 963.70, 1638.6],
    [0.001209, 0.071505, 986.76, 1616.1],
    [0.001219, 0.065300, 1010.0, 1593.2],
    [0.001229, 0.059707, 1033.4, 1569.8],
    [0.001240, 0.054656, 1056.9, 1545.7],
    [0.001252, 0.050085, 1080.7, 1521.1],
    [0.001263, 0.045941, 1104.7, 1495.8],
    [0.001276, 0.042175, 1128.8, 1469.9],
    [0.001289, 0.038748, 1153.3, 1443.2],
    [0.001303, 0.035622, 1177.9, 1415.7],
    [0.001317, 0.032767, 1202.9, 1387.4],
    [0.001333, 0.030153, 1228.2, 1358.2],
    [0.001349, 0.027756, 1253.7, 1328.1],
    [0.001366, 0.025554, 1279.7, 1296.9],
    [0.001384, 0.023528, 1306.0, 1264.5],
    [0.001404, 0.021659, 1332.7, 1230.9],
    [0.001425, 0.019932, 1360.0, 1195.9],
    [0.001447, 0.018333, 1387.7, 1159.3],
    [0.001472, 0.016849, 1416.1, 1121.1],
    [0.001499, 0.015470, 1445.1, 1080.9],
    [0.001528, 0.014183, 1475.0, 1038.5],
    [0.001560, 0.012979, 1505.7, 993.5],
    [0.001597, 0.011848, 1537.5, 945.5],
    [0.001638, 0.010783, 1570.7, 893.8],
    [0.001685, 0.009772, 1605.5, 837.7],
    [0.001741, 0.008806, 1642.4, 775.9],
    [0.001808, 0.007872, 1682.2, 706.4],
    [0.001895, 0.006950, 1726.2, 625.7],
    [0.002015, 0.006009, 1777.2, 526.4],
    [0.002217, 0.004953, 1844.5, 385.6],
    [0.003106, 0.003106, 2015.7, 0],
];

const vs = [
    [0.001000, 206.00, 0.0000, 9.1556],
    [0.001000, 147.03, 0.0763, 8.9487],
    [0.001000, 106.32, 0.1511, 8.7488],
    [0.001001, 77.885, 0.2245, 8.5559],
    [0.001002, 57.762, 0.2965, 8.3696],
    [0.001003, 43.340, 0.3672, 8.1895],
    [0.001004, 32.879, 0.4368, 8.0152],
    [0.001006, 25.205, 0.5051, 7.8466],
    [0.001008, 19.515, 0.5724, 7.6832],
    [0.001010, 15.251, 0.6386, 7.5247],
    [0.001012, 12.026, 0.7038, 7.3710],
    [0.001015, 9.5639, 0.7680, 7.2218],
    [0.001017, 7.6670, 0.8313, 7.0769],
    [0.001020, 6.1935, 0.8937, 6.9360],
    [0.001023, 5.0396, 0.9551, 6.7989],
    [0.001026, 4.1291, 1.0158, 6.6655],
    [0.001029, 3.4053, 1.0756, 6.5355],
    [0.001032, 2.8261, 1.1346, 6.4089],
    [0.001036, 2.3593, 1.1929, 6.2853],
    [0.001040, 1.9808, 1.2504, 6.1647],
    [0.001043, 1.6720, 1.3072, 6.0470],
    [0.001047, 1.4186, 1.3634, 5.9319],
    [0.001052, 1.2094, 1.4188, 5.8193],
    [0.001056, 1.0360, 1.4737, 5.7092],
    [0.001060, 0.89133, 1.5279, 5.6013],
    [0.001065, 0.77012, 1.5816, 5.4956],
    [0.001070, 0.66808, 1.6346, 5.3919],
    [0.001075, 0.58179, 1.6872, 5.2901],
    [0.001080, 0.50850, 1.7392, 5.1901],
    [0.001085, 0.44600, 1.7908, 5.0919],
    [0.001091, 0.39248, 1.8418, 4.9953],
    [0.001096, 0.34648, 1.8924, 4.9002],
    [0.001102, 0.30680, 1.9426, 4.8066],
    [0.001108, 0.27244, 1.9923, 4.7143],
    [0.001114, 0.24260, 2.0417, 4.6233],
    [0.001121, 0.21659, 2.0906, 4.5335],
    [0.001127, 0.19384, 2.1392, 4.4448],
    [0.001134, 0.17390, 2.1875, 4.3572],
    [0.001141, 0.15636, 2.2355, 4.2705],
    [0.001149, 0.14089, 2.2831, 4.1847],
    [0.001157, 0.12721, 2.3305, 4.0997],
    [0.001164, 0.11508, 2.3776, 4.0154],
    [0.001173, 0.10429, 2.4245, 3.9318],
    [0.001181, 0.094680, 2.4712, 3.8489],
    [0.001190, 0.086094, 2.5176, 3.7664],
    [0.001199, 0.078405, 2.5639, 3.6844],
    [0.001209, 0.071505, 2.6100, 3.6028],
    [0.001219, 0.065300, 2.6560, 3.5216],
    [0.001229, 0.059707, 2.7018, 3.4405],
    [0.001240, 0.054656, 2.7476, 3.3596],
    [0.001252, 0.050085, 2.7933, 3.2788],
    [0.001263, 0.045941, 2.8390, 3.1979],
    [0.001276, 0.042175, 2.8847, 3.1169],
    [0.001289, 0.038748, 2.9304, 3.0358],
    [0.001303, 0.035622, 2.9762, 2.9542],
    [0.001317, 0.032767, 3.0221, 2.8723],
    [0.001333, 0.030153, 3.0681, 2.7898],
    [0.001349, 0.027756, 3.1144, 2.7066],
    [0.001366, 0.025554, 3.1608, 2.6225],
    [0.001384, 0.023528, 3.2076, 2.5374],
    [0.001404, 0.021659, 3.2548, 2.4511],
    [0.001425, 0.019932, 3.3024, 2.3633],
    [0.001447, 0.018333, 3.3506, 2.2737],
    [0.001472, 0.016849, 3.3994, 2.1821],
    [0.001499, 0.015470, 3.4491, 2.0881],
    [0.001528, 0.014183, 3.4998, 1.9911],
    [0.001560, 0.012979, 3.5516, 1.8906],
    [0.001597, 0.011848, 3.6050, 1.7857],
    [0.001638, 0.010783, 3.6602, 1.6756],
    [0.001685, 0.009772, 3.7179, 1.5585],
    [0.001741, 0.008806, 3.7788, 1.4326],
    [0.001808, 0.007872, 3.8442, 1.2942],
    [0.001895, 0.006950, 3.9165, 1.1373],
    [0.002015, 0.006009, 4.0004, 0.9489],
    [0.002217, 0.004953, 4.1119, 0.6890],
    [0.003106, 0.003106, 4.4070, 0],
];

const vh = [
    [0.001000, 206.00, 0.001, 2500.9],
    [0.001000, 147.03, 21.020, 2489.1],
    [0.001000, 106.32, 42.022, 2477.2],
    [0.001001, 77.885, 62.982, 2465.4],
    [0.001002, 57.762, 83.915, 2453.5],
    [0.001003, 43.340, 104.83, 2441.7],
    [0.001004, 32.879, 125.74, 2429.8],
    [0.001006, 25.205, 146.64, 2417.9],
    [0.001008, 19.515, 167.53, 2406.0],
    [0.001010, 15.251, 188.44, 2394.0],
    [0.001012, 12.026, 209.34, 2382.0],
    [0.001015, 9.5639, 230.26, 2369.8],
    [0.001017, 7.6670, 251.18, 2357.7],
    [0.001020, 6.1935, 272.12, 2345.4],
    [0.001023, 5.0396, 293.07, 2333.0],
    [0.001026, 4.1291, 314.03, 2320.6],
    [0.001029, 3.4053, 335.02, 2308.0],
    [0.001032, 2.8261, 356.02, 2295.3],
    [0.001036, 2.3593, 377.04, 2282.5],
    [0.001040, 1.9808, 398.09, 2269.6],
    [0.001043, 1.6720, 419.17, 2256.4],
    [0.001047, 1.4186, 440.28, 2243.1],
    [0.001052, 1.2094, 461.42, 2229.7],
    [0.001056, 1.0360, 482.59, 2216.0],
    [0.001060, 0.89133, 503.81, 2202.1],
    [0.001065, 0.77012, 525.07, 2188.1],
    [0.001070, 0.66808, 546.38, 2173.7],
    [0.001075, 0.58179, 567.75, 2159.1],
    [0.001080, 0.50850, 589.16, 2144.3],
    [0.001085, 0.44600, 610.64, 2129.2],
    [0.001091, 0.39248, 632.18, 2113.8],
    [0.001096, 0.34648, 653.79, 2098.0],
    [0.001102, 0.30680, 675.47, 2082.0],
    [0.001108, 0.27244, 697.24, 2065.6],
    [0.001114, 0.24260, 719.08, 2048.8],
    [0.001121, 0.21659, 741.02, 2031.7],
    [0.001127, 0.19384, 763.05, 2014.2],
    [0.001134, 0.17390, 785.19, 1996.2],
    [0.001141, 0.15636, 807.43, 1977.9],
    [0.001149, 0.14089, 829.78, 1959.0],
    [0.001157, 0.12721, 852.26, 1939.8],
    [0.001164, 0.11508, 874.87, 1920.0],
    [0.001173, 0.10429, 897.61, 1899.7],
    [0.001181, 0.094680, 920.50, 1878.8],
    [0.001190, 0.086094, 943.55, 1857.4],
    [0.001199, 0.078405, 966.76, 1835.4],
    [0.001209, 0.071505, 990.14, 1812.8],
    [0.001219, 0.065300, 1013.7, 1789.5],
    [0.001229, 0.059707, 1037.5, 1765.5],
    [0.001240, 0.054656, 1061.5, 1740.8],
    [0.001252, 0.050085, 1085.7, 1715.3],
    [0.001263, 0.045941, 1110.1, 1689.0],
    [0.001276, 0.042175, 1134.8, 1661.8],
    [0.001289, 0.038748, 1159.8, 1633.7],
    [0.001303, 0.035622, 1185.1, 1604.6],
    [0.001317, 0.032767, 1210.7, 1574.5],
    [0.001333, 0.030153, 1236.7, 1543.2],
    [0.001349, 0.027756, 1263.1, 1510.7],
    [0.001366, 0.025554, 1289.8, 1476.9],
    [0.001384, 0.023528, 1317.1, 1441.6],
    [0.001404, 0.021659, 1344.8, 1404.8],
    [0.001425, 0.019932, 1373.1, 1366.3],
    [0.001447, 0.018333, 1402.0, 1325.9],
    [0.001472, 0.016849, 1431.6, 1283.4],
    [0.001499, 0.015470, 1462.0, 1238.5],
    [0.001528, 0.014183, 1493.4, 1191.0],
    [0.001560, 0.012979, 1525.8, 1140.3],
    [0.001597, 0.011848, 1559.4, 1086.0],
    [0.001638, 0.010783, 1594.6, 1027.4],
    [0.001685, 0.009772, 1631.7, 963.4],
    [0.001741, 0.008806, 1671.2, 892.7],
    [0.001808, 0.007872, 1714.0, 812.9],
    [0.001895, 0.006950, 1761.5, 720.1],
    [0.002015, 0.006009, 1817.2, 605.5],
    [0.002217, 0.004953, 1891.2, 443.1],
    [0.003106, 0.003106, 2084.3, 0],
];

const uh = [
    [0.000, 2374.9, 0.001, 2500.9],
    [21.019, 2360.8, 21.020, 2489.1],
    [42.020, 2346.6, 42.022, 2477.2],
    [62.980, 2332.5, 62.982, 2465.4],
    [83.913, 2318.4, 83.915, 2453.5],
    [104.83, 2304.3, 104.83, 2441.7],
    [125.73, 2290.2, 125.74, 2429.8],
    [146.63, 2276.0, 146.64, 2417.9],
    [167.53, 2261.9, 167.53, 2406.0],
    [188.43, 2247.7, 188.44, 2394.0],
    [209.33, 2233.4, 209.34, 2382.0],
    [230.24, 2219.1, 230.26, 2369.8],
    [251.16, 2204.7, 251.18, 2357.7],
    [272.09, 2190.3, 272.12, 2345.4],
    [293.04, 2175.8, 293.07, 2333.0],
    [313.99, 2161.3, 314.03, 2320.6],
    [334.97, 2146.6, 335.02, 2308.0],
    [355.96, 2131.9, 356.02, 2295.3],
    [376.97, 2117.0, 377.04, 2282.5],
    [398.00, 2102.0, 398.09, 2269.6],
    [419.06, 2087.0, 419.17, 2256.4],
    [440.15, 2071.8, 440.28, 2243.1],
    [461.27, 2056.4, 461.42, 2229.7],
    [482.42, 2040.9, 482.59, 2216.0],
    [503.60, 2025.3, 503.81, 2202.1],
    [524.83, 2009.5, 525.07, 2188.1],
    [546.10, 1993.4, 546.38, 2173.7],
    [567.41, 1977.3, 567.75, 2159.1],
    [588.77, 1960.9, 589.16, 2144.3],
    [610.19, 1944.2, 610.64, 2129.2],
    [631.66, 1927.4, 632.18, 2113.8],
    [653.19, 1910.3, 653.79, 2098.0],
    [674.79, 1893.0, 675.47, 2082.0],
    [696.46, 1875.4, 697.24, 2065.6],
    [718.20, 1857.5, 719.08, 2048.8],
    [740.02, 1839.4, 741.02, 2031.7],
    [761.92, 1820.9, 763.05, 2014.2],
    [783.91, 1802.1, 785.19, 1996.2],
    [806.00, 1783.0, 807.43, 1977.9],
    [828.18, 1763.6, 829.78, 1959.0],
    [850.46, 1743.7, 852.26, 1939.8],
    [872.86, 1723.5, 874.87, 1920.0],
    [895.38, 1702.9, 897.61, 1899.7],
    [918.02, 1681.9, 920.50, 1878.8],
    [940.79, 1660.5, 943.55, 1857.4],
    [963.70, 1638.6, 966.76, 1835.4],
    [986.76, 1616.1, 990.14, 1812.8],
    [1010.0, 1593.2, 1013.7, 1789.5],
    [1033.4, 1569.8, 1037.5, 1765.5],
    [1056.9, 1545.7, 1061.5, 1740.8],
    [1080.7, 1521.1, 1085.7, 1715.3],
    [1104.7, 1495.8, 1110.1, 1689.0],
    [1128.8, 1469.9, 1134.8, 1661.8],
    [1153.3, 1443.2, 1159.8, 1633.7],
    [1177.9, 1415.7, 1185.1, 1604.6],
    [1202.9, 1387.4, 1210.7, 1574.5],
    [1228.2, 1358.2, 1236.7, 1543.2],
    [1253.7, 1328.1, 1263.1, 1510.7],
    [1279.7, 1296.9, 1289.8, 1476.9],
    [1306.0, 1264.5, 1317.1, 1441.6],
    [1332.7, 1230.9, 1344.8, 1404.8],
    [1360.0, 1195.9, 1373.1, 1366.3],
    [1387.7, 1159.3, 1402.0, 1325.9],
    [1416.1, 1121.1, 1431.6, 1283.4],
    [1445.1, 1080.9, 1462.0, 1238.5],
    [1475.0, 1038.5, 1493.4, 1191.0],
    [1505.7, 993.5, 1525.8, 1140.3],
    [1537.5, 945.5, 1559.4, 1086.0],
    [1570.7, 893.8, 1594.6, 1027.4],
    [1605.5, 837.7, 1631.7, 963.4],
    [1642.4, 775.9, 1671.2, 892.7],
    [1682.2, 706.4, 1714.0, 812.9],
    [1726.2, 625.7, 1761.5, 720.1],
    [1777.2, 526.4, 1817.2, 605.5],
    [1844.5, 385.6, 1891.2, 443.1],
    [2015.7, 0, 2084.3, 0],

];

const us = [
    [0.000, 2374.9, 0.0000, 9.1556],
    [21.019, 2360.8, 0.0763, 8.9487],
    [42.020, 2346.6, 0.1511, 8.7488],
    [62.980, 2332.5, 0.2245, 8.5559],
    [83.913, 2318.4, 0.2965, 8.3696],
    [104.83, 2304.3, 0.3672, 8.1895],
    [125.73, 2290.2, 0.4368, 8.0152],
    [146.63, 2276.0, 0.5051, 7.8466],
    [167.53, 2261.9, 0.5724, 7.6832],
    [188.43, 2247.7, 0.6386, 7.5247],
    [209.33, 2233.4, 0.7038, 7.3710],
    [230.24, 2219.1, 0.7680, 7.2218],
    [251.16, 2204.7, 0.8313, 7.0769],
    [272.09, 2190.3, 0.8937, 6.9360],
    [293.04, 2175.8, 0.9551, 6.7989],
    [313.99, 2161.3, 1.0158, 6.6655],
    [334.97, 2146.6, 1.0756, 6.5355],
    [355.96, 2131.9, 1.1346, 6.4089],
    [376.97, 2117.0, 1.1929, 6.2853],
    [398.00, 2102.0, 1.2504, 6.1647],
    [419.06, 2087.0, 1.3072, 6.0470],
    [440.15, 2071.8, 1.3634, 5.9319],
    [461.27, 2056.4, 1.4188, 5.8193],
    [482.42, 2040.9, 1.4737, 5.7092],
    [503.60, 2025.3, 1.5279, 5.6013],
    [524.83, 2009.5, 1.5816, 5.4956],
    [546.10, 1993.4, 1.6346, 5.3919],
    [567.41, 1977.3, 1.6872, 5.2901],
    [588.77, 1960.9, 1.7392, 5.1901],
    [610.19, 1944.2, 1.7908, 5.0919],
    [631.66, 1927.4, 1.8418, 4.9953],
    [653.19, 1910.3, 1.8924, 4.9002],
    [674.79, 1893.0, 1.9426, 4.8066],
    [696.46, 1875.4, 1.9923, 4.7143],
    [718.20, 1857.5, 2.0417, 4.6233],
    [740.02, 1839.4, 2.0906, 4.5335],
    [761.92, 1820.9, 2.1392, 4.4448],
    [783.91, 1802.1, 2.1875, 4.3572],
    [806.00, 1783.0, 2.2355, 4.2705],
    [828.18, 1763.6, 2.2831, 4.1847],
    [850.46, 1743.7, 2.3305, 4.0997],
    [872.86, 1723.5, 2.3776, 4.0154],
    [895.38, 1702.9, 2.4245, 3.9318],
    [918.02, 1681.9, 2.4712, 3.8489],
    [940.79, 1660.5, 2.5176, 3.7664],
    [963.70, 1638.6, 2.5639, 3.6844],
    [986.76, 1616.1, 2.6100, 3.6028],
    [1010.0, 1593.2, 2.6560, 3.5216],
    [1033.4, 1569.8, 2.7018, 3.4405],
    [1056.9, 1545.7, 2.7476, 3.3596],
    [1080.7, 1521.1, 2.7933, 3.2788],
    [1104.7, 1495.8, 2.8390, 3.1979],
    [1128.8, 1469.9, 2.8847, 3.1169],
    [1153.3, 1443.2, 2.9304, 3.0358],
    [1177.9, 1415.7, 2.9762, 2.9542],
    [1202.9, 1387.4, 3.0221, 2.8723],
    [1228.2, 1358.2, 3.0681, 2.7898],
    [1253.7, 1328.1, 3.1144, 2.7066],
    [1279.7, 1296.9, 3.1608, 2.6225],
    [1306.0, 1264.5, 3.2076, 2.5374],
    [1332.7, 1230.9, 3.2548, 2.4511],
    [1360.0, 1195.9, 3.3024, 2.3633],
    [1387.7, 1159.3, 3.3506, 2.2737],
    [1416.1, 1121.1, 3.3994, 2.1821],
    [1445.1, 1080.9, 3.4491, 2.0881],
    [1475.0, 1038.5, 3.4998, 1.9911],
    [1505.7, 993.5, 3.5516, 1.8906],
    [1537.5, 945.5, 3.6050, 1.7857],
    [1570.7, 893.8, 3.6602, 1.6756],
    [1605.5, 837.7, 3.7179, 1.5585],
    [1642.4, 775.9, 3.7788, 1.4326],
    [1682.2, 706.4, 3.8442, 1.2942],
    [1726.2, 625.7, 3.9165, 1.1373],
    [1777.2, 526.4, 4.0004, 0.9489],
    [1844.5, 385.6, 4.1119, 0.6890],
    [2015.7, 0, 4.4070, 0],
];

const hs = [
    [0.001, 2500.9, 0.0000, 9.1556],
    [21.020, 2489.1, 0.0763, 8.9487],
    [42.022, 2477.2, 0.1511, 8.7488],
    [62.982, 2465.4, 0.2245, 8.5559],
    [83.915, 2453.5, 0.2965, 8.3696],
    [104.83, 2441.7, 0.3672, 8.1895],
    [125.74, 2429.8, 0.4368, 8.0152],
    [146.64, 2417.9, 0.5051, 7.8466],
    [167.53, 2406.0, 0.5724, 7.6832],
    [188.44, 2394.0, 0.6386, 7.5247],
    [209.34, 2382.0, 0.7038, 7.3710],
    [230.26, 2369.8, 0.7680, 7.2218],
    [251.18, 2357.7, 0.8313, 7.0769],
    [272.12, 2345.4, 0.8937, 6.9360],
    [293.07, 2333.0, 0.9551, 6.7989],
    [314.03, 2320.6, 1.0158, 6.6655],
    [335.02, 2308.0, 1.0756, 6.5355],
    [356.02, 2295.3, 1.1346, 6.4089],
    [377.04, 2282.5, 1.1929, 6.2853],
    [398.09, 2269.6, 1.2504, 6.1647],
    [419.17, 2256.4, 1.3072, 6.0470],
    [440.28, 2243.1, 1.3634, 5.9319],
    [461.42, 2229.7, 1.4188, 5.8193],
    [482.59, 2216.0, 1.4737, 5.7092],
    [503.81, 2202.1, 1.5279, 5.6013],
    [525.07, 2188.1, 1.5816, 5.4956],
    [546.38, 2173.7, 1.6346, 5.3919],
    [567.75, 2159.1, 1.6872, 5.2901],
    [589.16, 2144.3, 1.7392, 5.1901],
    [610.64, 2129.2, 1.7908, 5.0919],
    [632.18, 2113.8, 1.8418, 4.9953],
    [653.79, 2098.0, 1.8924, 4.9002],
    [675.47, 2082.0, 1.9426, 4.8066],
    [697.24, 2065.6, 1.9923, 4.7143],
    [719.08, 2048.8, 2.0417, 4.6233],
    [741.02, 2031.7, 2.0906, 4.5335],
    [763.05, 2014.2, 2.1392, 4.4448],
    [785.19, 1996.2, 2.1875, 4.3572],
    [807.43, 1977.9, 2.2355, 4.2705],
    [829.78, 1959.0, 2.2831, 4.1847],
    [852.26, 1939.8, 2.3305, 4.0997],
    [874.87, 1920.0, 2.3776, 4.0154],
    [897.61, 1899.7, 2.4245, 3.9318],
    [920.50, 1878.8, 2.4712, 3.8489],
    [943.55, 1857.4, 2.5176, 3.7664],
    [966.76, 1835.4, 2.5639, 3.6844],
    [990.14, 1812.8, 2.6100, 3.6028],
    [1013.7, 1789.5, 2.6560, 3.5216],
    [1037.5, 1765.5, 2.7018, 3.4405],
    [1061.5, 1740.8, 2.7476, 3.3596],
    [1085.7, 1715.3, 2.7933, 3.2788],
    [1110.1, 1689.0, 2.8390, 3.1979],
    [1134.8, 1661.8, 2.8847, 3.1169],
    [1159.8, 1633.7, 2.9304, 3.0358],
    [1185.1, 1604.6, 2.9762, 2.9542],
    [1210.7, 1574.5, 3.0221, 2.8723],
    [1236.7, 1543.2, 3.0681, 2.7898],
    [1263.1, 1510.7, 3.1144, 2.7066],
    [1289.8, 1476.9, 3.1608, 2.6225],
    [1317.1, 1441.6, 3.2076, 2.5374],
    [1344.8, 1404.8, 3.2548, 2.4511],
    [1373.1, 1366.3, 3.3024, 2.3633],
    [1402.0, 1325.9, 3.3506, 2.2737],
    [1431.6, 1283.4, 3.3994, 2.1821],
    [1462.0, 1238.5, 3.4491, 2.0881],
    [1493.4, 1191.0, 3.4998, 1.9911],
    [1525.8, 1140.3, 3.5516, 1.8906],
    [1559.4, 1086.0, 3.6050, 1.7857],
    [1594.6, 1027.4, 3.6602, 1.6756],
    [1631.7, 963.4, 3.7179, 1.5585],
    [1671.2, 892.7, 3.7788, 1.4326],
    [1714.0, 812.9, 3.8442, 1.2942],
    [1761.5, 720.1, 3.9165, 1.1373],
    [1817.2, 605.5, 4.0004, 0.9489],
    [1891.2, 443.1, 4.1119, 0.6890],
    [2084.3, 0, 4.4070, 0],
];

const atm = [10, 50, 100, 200, 300, 400, 500, 600, 800, 1000,
    1200, 1400, 1600, 1800, 2000, 2500, 3000, 3500,
    4000, 4500, 5000, 6000, 7000, 8000, 9000, 10000,
    12500, 15000, 17500, 20000, 25000, 30000, 35000, 40000, 50000, 60000];

//atm[0] stands for pressure 
//ptable[0][0][1] stands for specific volume 
//ptable[0][0][2] stands for internal energy 

ptable = [
    [
        [50, 14.867, 2443.3, 2592.0, 8.1741],    //data entered in the form of v u h s
        [100, 17.196, 2515.5, 2687.5, 8.4489],
        [150, 19.513, 2587.9, 2783.0, 8.6893],
        [200, 21.826, 2661.4, 2879.6, 8.9049],
        [250, 24.136, 2736.1, 2977.5, 9.1015],
        [300, 26.446, 2812.3, 3076.7, 9.2827],
        [400, 31.063, 2969.3, 3280.0, 9.6094],
        [500, 35.680, 3132.9, 3489.7, 9.8998],
        [600, 40.296, 3303.3, 3706.3, 10.1631],
        [700, 44.911, 3480.8, 3929.9, 10.4056],
        [800, 49.527, 3665.4, 4160.6, 10.6312],
        [900, 54.143, 3856.9, 4398.3, 10.8429],
        [1000, 58.758, 4055.3, 4642.8, 11.0429],
        [1100, 63.373, 4260.0, 4893.8, 11.2326],
        [1200, 67.989, 4470.9, 5150.8, 11.4132],
        [1300, 72.604, 4687.4, 5413.4, 11.5857],
    ],

    [
        [100, 3.4187, 2511.5, 2682.4, 7.6953],
        [150, 3.8897, 2585.7, 2780.2, 7.9413],
        [200, 4.3562, 2660.0, 2877.8, 8.1592],
        [250, 4.8206, 2735.1, 2976.2, 8.3568],
        [300, 5.2841, 2811.6, 3075.8, 8.5387],
        [400, 6.2094, 2968.9, 3279.3, 8.8659],
        [500, 7.1338, 3132.6, 3489.3, 9.1566],
        [600, 8.0577, 3303.1, 3706.0, 9.4201],
        [700, 8.9813, 3480.6, 3929.7, 9.6626],
        [800, 9.9047, 3665.2, 4160.4, 9.8883],
        [900, 10.8280, 3856.8, 4398.2, 10.1000],
        [1000, 11.7513, 4055.2, 4642.7, 10.3000],
        [1100, 12.6745, 4259.9, 4893.7, 10.4897],
        [1200, 13.5977, 4470.8, 5150.7, 10.6704],
        [1300, 14.5209, 4687.3, 5413.3, 10.8429],
    ],

    [
        [100, 1.6959, 2506.2, 2675.8, 7.3611],
        [150, 1.9367, 2582.9, 2776.6, 7.6148],
        [200, 2.1724, 2658.2, 2875.5, 7.8356],
        [250, 2.4062, 2733.9, 2974.5, 8.0346],
        [300, 2.6389, 2810.7, 3074.5, 8.2172],
        [400, 3.1027, 2968.3, 3278.6, 8.5452],
        [500, 3.5655, 3132.2, 3488.7, 8.8362],
        [600, 4.0279, 3302.8, 3705.6, 9.0999],
        [700, 4.4900, 3480.4, 3929.4, 9.3424],
        [800, 4.9519, 3665.0, 4160.2, 9.5682],
        [900, 5.4137, 3856.7, 4398.0, 9.7800],
        [1000, 5.8755, 4055.0, 4642.6, 9.9800],
        [1100, 6.3372, 4259.8, 4893.6, 10.1698],
        [1200, 6.7988, 4470.7, 5150.6, 10.3504],
        [1300, 7.2605, 4687.2, 5413.3, 10.5229],
    ],

    [
        [150, 0.95986, 2577.1, 2769.1, 7.2810],
        [200, 1.08049, 2654.6, 2870.7, 7.5081],
        [250, 1.19890, 2731.4, 2971.2, 7.7100],
        [300, 1.31623, 2808.8, 3072.1, 7.8941],
        [400, 1.54934, 2967.2, 3277.0, 8.2236],
        [500, 1.78142, 3131.4, 3487.7, 8.5153],
        [600, 2.01302, 3302.2, 3704.8, 8.7793],
        [700, 2.24434, 3479.9, 3928.8, 9.0221],
        [800, 2.47550, 3664.7, 4159.8, 9.2479],
        [900, 2.70656, 3856.3, 4397.7, 9.4598],
        [1000, 2.93755, 4054.8, 4642.3, 9.6599],
        [1100, 3.16848, 4259.6, 4893.3, 9.8497],
        [1200, 3.39938, 4470.5, 5150.4, 10.0304],
        [1300, 3.63026, 4687.1, 5413.1, 10.2029],
    ],


    [
        [150, 0.63402, 2571.0, 2761.2, 7.0792],
        [200, 0.71643, 2651.0, 2865.9, 7.3132],
        [250, 0.79645, 2728.9, 2967.9, 7.5180],
        [300, 0.87535, 2807.0, 3069.6, 7.7037],
        [400, 1.03155, 2966.0, 3275.5, 8.0347],
        [500, 1.18672, 3130.6, 3486.6, 8.3271],
        [600, 1.34139, 3301.6, 3704.0, 8.5915],
        [700, 1.49580, 3479.5, 3928.2, 8.8345],
        [800, 1.65004, 3664.3, 4159.3, 9.0605],
        [900, 1.80417, 3856.0, 4397.3, 9.2725],
        [1000, 1.95824, 4054.5, 4642.0, 9.4726],
        [1100, 2.11226, 4259.4, 4893.1, 9.6624],
        [1200, 2.26624, 4470.3, 5150.2, 9.8431],
        [1300, 2.42019, 4686.9, 5413.0, 10.0157],
    ],


    [
        [150, 0.47088, 2564.4, 2752.8, 6.9306],
        [200, 0.53434, 2647.2, 2860.9, 7.1723],
        [250, 0.59520, 2726.4, 2964.5, 7.3804],
        [300, 0.65489, 2805.1, 3067.1, 7.5677],
        [400, 0.77265, 2964.9, 3273.9, 7.9003],
        [500, 0.88936, 3129.8, 3485.5, 8.1933],
        [600, 1.00558, 3301.0, 3703.3, 8.4580],
        [700, 1.12152, 3479.0, 3927.6, 8.7012],
        [800, 1.23730, 3663.9, 4158.9, 8.9274],
        [900, 1.35298, 3855.7, 4396.9, 9.1394],
        [1000, 1.46859, 4054.3, 4641.7, 9.3396],
        [1100, 1.58414, 4259.2, 4892.9, 9.5295],
        [1200, 1.69966, 4470.2, 5150.0, 9.7102],
        [1300, 1.81516, 4686.7, 5412.8, 9.8828],
    ],


    [
        [200, 0.42503, 2643.3, 2855.8, 7.0610],
        [250, 0.47443, 2723.8, 2961.0, 7.2725],
        [300, 0.52261, 2803.3, 3064.6, 7.4614],
        [350, 0.57015, 2883.0, 3168.1, 7.6346],
        [400, 0.61731, 2963.7, 3272.4, 7.7956],
        [500, 0.71095, 3129.0, 3484.5, 8.0893],
        [600, 0.80409, 3300.4, 3702.5, 8.3544],
        [700, 0.89696, 3478.6, 3927.0, 8.5978],
        [800, 0.98966, 3663.6, 4158.4, 8.8240],
        [900, 1.08227, 3855.4, 4396.6, 9.0362],
        [1000, 1.17480, 4054.0, 4641.4, 9.2364],
        [1100, 1.26728, 4259.0, 4892.6, 9.4263],
        [1200, 1.35972, 4470.0, 5149.8, 9.6071],
        [1300, 1.45214, 4686.6, 5412.6, 9.7797],
    ],


    [
        [200, 0.35212, 2639.4, 2850.6, 6.9683],
        [250, 0.39390, 2721.2, 2957.6, 7.1833],
        [300, 0.43442, 2801.4, 3062.0, 7.3740],
        [350, 0.47428, 2881.6, 3166.1, 7.5481],
        [400, 0.51374, 2962.5, 3270.8, 7.7097],
        [500, 0.59200, 3128.2, 3483.4, 8.0041],
        [600, 0.66976, 3299.8, 3701.7, 8.2695],
        [700, 0.74725, 3478.1, 3926.4, 8.5132],
        [800, 0.82457, 3663.2, 4157.9, 8.7395],
        [900, 0.90179, 3855.1, 4396.2, 8.9518],
        [1000, 0.97893, 4053.8, 4641.1, 9.1521],
        [1100, 1.05603, 4258.8, 4892.4, 9.3420],
        [1200, 1.13309, 4469.8, 5149.6, 9.5229],
        [1300, 1.45214, 4686.6, 5412.6, 9.7797],
    ],


    [
        [200, 0.26088, 2631.1, 2839.8, 6.8177],
        [250, 0.29321, 2715.9, 2950.4, 7.0402],
        [300, 0.32416, 2797.5, 3056.9, 7.2345],
        [350, 0.35442, 2878.6, 3162.2, 7.4107],
        [400, 0.38429, 2960.2, 3267.7, 7.5735],
        [500, 0.44332, 3126.6, 3481.3, 7.8692],
        [600, 0.50186, 3298.7, 3700.1, 8.1354],
        [700, 0.56011, 3477.2, 3925.3, 8.3794],
        [800, 0.61820, 3662.5, 4157.0, 8.6061],
        [900, 0.67619, 3854.5, 4395.5, 8.8185],
        [1000, 0.73411, 4053.3, 4640.5, 9.0189],
        [1100, 0.79197, 4258.3, 4891.9, 9.2090],
        [1200, 0.84980, 4469.4, 5149.3, 9.3898],
        [1300, 0.90761, 4686.1, 5412.2, 9.5625],
    ],


    [
        [200, 0.20602, 2622.3, 2828.3, 6.6956],
        [250, 0.23275, 2710.4, 2943.1, 6.9265],
        [300, 0.25799, 2793.7, 3051.6, 7.1246],
        [350, 0.28250, 2875.7, 3158.2, 7.3029],
        [400, 0.30661, 2957.9, 3264.5, 7.4670],
        [500, 0.35411, 3125.0, 3479.1, 7.7642],
        [600, 0.40111, 3297.5, 3698.6, 8.0311],
        [700, 0.44783, 3476.3, 3924.1, 8.2755],
        [800, 0.49438, 3661.7, 4156.1, 8.5024],
        [900, 0.54083, 3853.9, 4394.8, 8.7150],
        [1000, 0.58721, 4052.7, 4640.0, 8.9155],
        [1100, 0.63354, 4257.9, 4891.4, 9.1057],
        [1200, 0.67983, 4469.0, 5148.9, 9.2866],
        [1300, 0.72610, 4685.8, 5411.9, 9.4593],
    ],


    [
        [200, 0.16934, 2612.9, 2816.1, 6.5909],
        [250, 0.19241, 2704.7, 2935.6, 6.8313],
        [300, 0.21386, 2789.7, 3046.3, 7.0335],
        [350, 0.23455, 2872.7, 3154.2, 7.2139],
        [400, 0.25482, 2955.5, 3261.3, 7.3793],
        [500, 0.29464, 3123.4, 3477.0, 7.6779],
        [600, 0.33395, 3296.3, 3697.0, 7.9456],
        [700, 0.37297, 3475.3, 3922.9, 8.1904],
        [800, 0.41184, 3661.0, 4155.2, 8.4176],
        [900, 0.45059, 3853.3, 4394.0, 8.6303],
        [1000, 0.48928, 4052.2, 4639.4, 8.8310],
        [1100, 0.52792, 4257.5, 4891.0, 9.0212],
        [1200, 0.56652, 4468.7, 5148.5, 9.2022],
        [1300, 0.60509, 4685.5, 5411.6, 9.3750],
    ],


    [
        [200, 0.14303, 2602.7, 2803.0, 6.4975],
        [250, 0.16356, 2698.9, 2927.9, 6.7488],
        [300, 0.18233, 2785.7, 3040.9, 6.9553],
        [350, 0.20029, 2869.7, 3150.1, 7.1379],
        [400, 0.21782, 2953.1, 3258.1, 7.3046],
        [500, 0.25216, 3121.8, 3474.8, 7.6047],
        [600, 0.28597, 3295.1, 3695.5, 7.8730],
        [700, 0.31951, 3474.4, 3921.7, 8.1183],
        [800, 0.35288, 3660.3, 4154.3, 8.3458],
        [900, 0.38614, 3852.7, 4393.3, 8.5587],
        [1000, 0.41933, 4051.7, 4638.8, 8.7595],
        [1100, 0.45247, 4257.0, 4890.5, 8.9497],
        [1200, 0.48558, 4468.3, 5148.1, 9.1308],
        [1300, 0.51866, 4685.1, 5411.3, 9.3036],
    ],


    [
        [225, 0.13293, 2645.1, 2857.8, 6.5537],
        [250, 0.14190, 2692.9, 2919.9, 6.6753],
        [300, 0.15866, 2781.6, 3035.4, 6.8864],
        [350, 0.17459, 2866.6, 3146.0, 7.0713],
        [400, 0.19007, 2950.8, 3254.9, 7.2394],
        [500, 0.22029, 3120.1, 3472.6, 7.5410],
        [600, 0.24999, 3293.9, 3693.9, 7.8101],
        [700, 0.27941, 3473.5, 3920.5, 8.0558],
        [800, 0.30865, 3659.5, 4153.4, 8.2834],
        [900, 0.33780, 3852.1, 4392.6, 8.4965],
        [1000, 0.36687, 4051.2, 4638.2, 8.6974],
        [1100, 0.39589, 4256.6, 4890.0, 8.8878],
        [1200, 0.42488, 4467.9, 5147.7, 9.0689],
        [1300, 0.45383, 4684.8, 5410.9, 9.2418],
    ],


    [
        [225, 0.11678, 2637.0, 2847.2, 6.4825],
        [250, 0.12502, 2686.7, 2911.7, 6.6088],
        [300, 0.14025, 2777.4, 3029.9, 6.8246],
        [350, 0.15460, 2863.6, 3141.9, 7.0120],
        [400, 0.16849, 2948.3, 3251.6, 7.1814],
        [500, 0.19551, 3118.5, 3470.4, 7.4845],
        [600, 0.22200, 3292.7, 3692.3, 7.7543],
        [700, 0.24822, 3472.6, 3919.4, 8.0005],
        [800, 0.27426, 3658.8, 4152.4, 8.2284],
        [900, 0.30020, 3851.5, 4391.9, 8.4417],
        [1000, 0.32606, 4050.7, 4637.6, 8.6427],
        [1100, 0.35188, 4256.2, 4889.6, 8.8331],
        [1200, 0.37766, 4467.6, 5147.3, 9.0143],
        [1300, 0.40341, 4684.5, 5410.6, 9.1872],
    ],


    [
        [225, 0.10381, 2628.5, 2836.1, 6.4160],
        [250, 0.11150, 2680.3, 2903.3, 6.5475],
        [300, 0.12551, 2773.2, 3024.2, 6.7684],
        [350, 0.13860, 2860.5, 3137.7, 6.9583],
        [400, 0.15122, 2945.9, 3248.4, 7.1292],
        [500, 0.17568, 3116.9, 3468.3, 7.4337],
        [600, 0.19962, 3291.5, 3690.7, 7.7043],
        [700, 0.22326, 3471.7, 3918.2, 7.9509],
        [800, 0.24674, 3658.0, 4151.5, 8.1791],
        [900, 0.27012, 3850.9, 4391.1, 8.3925],
        [1000, 0.29342, 4050.2, 4637.1, 8.5936],
        [1100, 0.31667, 4255.7, 4889.1, 8.7842],
        [1200, 0.33989, 4467.2, 5147.0, 8.9654],
        [1300, 0.36308, 4684.2, 5410.3, 9.1384],
    ],


    [
        [225, 0.08026, 2604.8, 2805.5, 6.2629],
        [250, 0.08705, 2663.3, 2880.9, 6.4107],
        [300, 0.09894, 2762.2, 3009.6, 6.6459],
        [350, 0.10979, 2852.5, 3127.0, 6.8424],
        [400, 0.12012, 2939.8, 3240.1, 7.0170],
        [450, 0.13015, 3026.2, 3351.6, 7.1768],
        [500, 0.13999, 3112.8, 3462.8, 7.3254],
        [600, 0.15931, 3288.5, 3686.8, 7.5979],
        [700, 0.17835, 3469.3, 3915.2, 7.8455],
        [800, 0.19722, 3656.2, 4149.2, 8.0744],
        [900, 0.21597, 3849.4, 4389.3, 8.2882],
        [1000, 0.23466, 4049.0, 4635.6, 8.4897],
        [1100, 0.25330, 4254.7, 4887.9, 8.6804],
        [1200, 0.27190, 4466.3, 5146.0, 8.8618],
        [1300, 0.29048, 4683.4, 5409.5, 9.0349],
    ],


    [
        [250, 0.07063, 2644.7, 2856.5, 6.2893],
        [300, 0.08118, 2750.8, 2994.3, 6.5412],
        [350, 0.09056, 2844.4, 3116.1, 6.7450],
        [400, 0.09938, 2933.6, 3231.7, 6.9235],
        [450, 0.10789, 3021.2, 3344.9, 7.0856],
        [500, 0.11620, 3108.6, 3457.2, 7.2359],
        [600, 0.13245, 3285.5, 3682.8, 7.5103],
        [700, 0.14841, 3467.0, 3912.2, 7.7590],
        [800, 0.16420, 3654.3, 4146.9, 7.9885],
        [900, 0.17988, 3847.9, 4387.5, 8.2028],
        [1000, 0.19549, 4047.7, 4634.2, 8.4045],
        [1100, 0.21105, 4253.6, 4886.7, 8.5955],
        [1200, 0.22658, 4465.3, 5145.1, 8.7771],
        [1300, 0.24207, 4682.6, 5408.8, 8.9502],
    ],


    [
        [250, 0.05876, 2624.0, 2829.7, 6.1764],
        [300, 0.06845, 2738.8, 2978.4, 6.4484],
        [350, 0.07680, 2836.0, 3104.9, 6.6601],
        [400, 0.08456, 2927.2, 3223.2, 6.8428],
        [450, 0.09198, 3016.1, 3338.1, 7.0074],
        [500, 0.09919, 3104.5, 3451.7, 7.1593],
        [600, 0.11325, 3282.5, 3678.9, 7.4357],
        [700, 0.12702, 3464.7, 3909.3, 7.6855],
        [800, 0.14061, 3652.5, 4144.6, 7.9156],
        [900, 0.15410, 3846.4, 4385.7, 8.1304],
        [1000, 0.16751, 4046.4, 4632.7, 8.3324],
        [1100, 0.18087, 4252.5, 4885.6, 8.5236],
        [1200, 0.19420, 4464.4, 5144.1, 8.7053],
        [1300, 0.20750, 4681.8, 5408.0, 8.8786],
    ],

    [
        [275, 0.05461, 2668.9, 2887.3, 6.2312],
        [300, 0.05887, 2726.2, 2961.7, 6.3639],
        [350, 0.06647, 2827.4, 3093.3, 6.5843],
        [400, 0.07343, 2920.8, 3214.5, 6.7714],
        [450, 0.08004, 3011.0, 3331.2, 6.9386],
        [500, 0.08644, 3100.3, 3446.0, 7.0922],
        [600, 0.09886, 3279.4, 3674.9, 7.3706],
        [700, 0.11098, 3462.4, 3906.3, 7.6214],
        [800, 0.12292, 3650.6, 4142.3, 7.8523],
        [900, 0.13476, 3844.8, 4383.9, 8.0675],
        [1000, 0.14653, 4045.1, 4631.2, 8.2698],
        [1100, 0.15824, 4251.4, 4884.4, 8.4612],
        [1200, 0.16992, 4463.5, 5143.2, 8.6430],
        [1300, 0.18157, 4680.9, 5407.2, 8.8164],
    ],


    [
        [275, 0.04733, 2651.4, 2864.4, 6.1429],
        [300, 0.05138, 2713.0, 2944.2, 6.2854],
        [350, 0.05842, 2818.6, 3081.5, 6.5153],
        [400, 0.06477, 2914.2, 3205.7, 6.7071],
        [450, 0.07076, 3005.8, 3324.2, 6.8770],
        [500, 0.07652, 3096.0, 3440.4, 7.0323],
        [600, 0.08766, 3276.4, 3670.9, 7.3127],
        [700, 0.09850, 3460.0, 3903.3, 7.5647],
        [800, 0.10916, 3648.8, 4140.0, 7.7962],
        [900, 0.11972, 3843.3, 4382.1, 8.0118],
        [1000, 0.13020, 4043.9, 4629.8, 8.2144],
        [1100, 0.14064, 4250.4, 4883.2, 8.4060],
        [1200, 0.15103, 4462.6, 5142.2, 8.5880],
        [1300, 0.16140, 4680.1, 5406.5, 8.7619],
    ],


    [
        [275, 0.04144, 2632.3, 2839.5, 6.0571],
        [300, 0.04535, 2699.0, 2925.7, 6.2111],
        [350, 0.05197, 2809.5, 3069.3, 6.4516],
        [400, 0.05784, 2907.5, 3196.7, 6.6483],
        [450, 0.06332, 3000.6, 3317.2, 6.8210],
        [500, 0.06858, 3091.8, 3434.7, 6.9781],
        [600, 0.07870, 3273.3, 3666.9, 7.2605],
        [700, 0.08852, 3457.7, 3900.3, 7.5136],
        [800, 0.09816, 3646.9, 4137.7, 7.7458],
        [900, 0.10769, 3841.8, 4380.2, 7.9619],
        [1000, 0.11715, 4042.6, 4628.3, 8.1648],
        [1100, 0.12655, 4249.3, 4882.1, 8.3566],
        [1200, 0.13592, 4461.6, 5141.3, 8.5388],
        [1300, 0.14527, 4679.3, 5405.7, 8.7124],
    ],


    [
        [300, 0.03619, 2668.4, 2885.6, 6.0703],
        [350, 0.04225, 2790.4, 3043.9, 6.3357],
        [400, 0.04742, 2893.7, 3178.3, 6.5432],
        [450, 0.05217, 2989.9, 3302.9, 6.7219],
        [500, 0.05667, 3083.1, 3423.1, 6.8826],
        [550, 0.06102, 3175.2, 3541.3, 7.0308],
        [600, 0.06527, 3267.2, 3658.8, 7.1693],
        [700, 0.07355, 3453.0, 3894.3, 7.4247],
        [800, 0.08165, 3643.2, 4133.1, 7.6582],
        [900, 0.08964, 3838.8, 4376.6, 7.8751],
        [1000, 0.09756, 4040.1, 4625.4, 8.0786],
        [1100, 0.10543, 4247.1, 4879.7, 8.2709],
        [1200, 0.11326, 4459.8, 5139.4, 8.4534],
        [1300, 0.12107, 4677.7, 5404.1, 8.6273],
    ],


    [
        [300, 0.029492, 2633.5, 2839.9, 5.9337],
        [350, 0.035262, 2770.1, 3016.9, 6.2305],
        [400, 0.039958, 2879.5, 3159.2, 6.4502],
        [450, 0.044187, 2979.0, 3288.3, 6.6353],
        [500, 0.048157, 3074.3, 3411.4, 6.8000],
        [550, 0.051966, 3167.9, 3531.6, 6.9507],
        [600, 0.055665, 3261.0, 3650.6, 7.0910],
        [700, 0.062850, 3448.3, 3888.3, 7.3487],
        [800, 0.069856, 3639.5, 4128.5, 7.5836],
        [900, 0.076750, 3835.7, 4373.0, 7.8014],
        [1000, 0.083571, 4037.5, 4622.5, 8.0055],
        [1100, 0.090341, 4245.0, 4877.4, 8.1982],
        [1200, 0.097075, 4457.9, 5137.4, 8.3810],
        [1300, 0.103781, 4676.1, 5402.6, 8.5551],
    ],


    [
        [300, 0.024279, 2592.3, 2786.5, 5.7937],
        [350, 0.029975, 2748.3, 2988.1, 6.1321],
        [400, 0.034344, 2864.6, 3139.4, 6.3658],
        [450, 0.038194, 2967.8, 3273.3, 6.5579],
        [500, 0.041767, 3065.4, 3399.5, 6.7266],
        [550, 0.045172, 3160.5, 3521.8, 6.8800],
        [600, 0.048463, 3254.7, 3642.4, 7.0221],
        [700, 0.054829, 3443.6, 3882.2, 7.2822],
        [800, 0.061011, 3635.7, 4123.8, 7.5185],
        [900, 0.067082, 3832.7, 4369.3, 7.7372],
        [1000, 0.073079, 4035.0, 4619.6, 7.9419],
        [1100, 0.079025, 4242.8, 4875.0, 8.1350],
        [1200, 0.084934, 4456.1, 5135.5, 8.3181],
        [1300, 0.090817, 4674.5, 5401.0, 8.4925],
    ],



    [
        [325, 0.023284, 2647.6, 2857.1, 5.8738],
        [350, 0.025816, 2725.0, 2957.3, 6.0380],
        [400, 0.029960, 2849.2, 3118.8, 6.2876],
        [450, 0.033524, 2956.3, 3258.0, 6.4872],
        [500, 0.036793, 3056.3, 3387.4, 6.6603],
        [550, 0.039885, 3153.0, 3512.0, 6.8164],
        [600, 0.042861, 3248.4, 3634.1, 6.9605],
        [650, 0.045755, 3343.4, 3755.2, 7.0954],
        [700, 0.048589, 3438.8, 3876.1, 7.2229],
        [800, 0.054132, 3632.0, 4119.2, 7.4606],
        [900, 0.059562, 3829.6, 4365.7, 7.6802],
        [1000, 0.064919, 4032.4, 4616.7, 7.8855],
        [1100, 0.070224, 4240.7, 4872.7, 8.0791],
        [1200, 0.075492, 4454.2, 5133.6, 8.2625],
        [1300, 0.080733, 4672.9, 5399.5, 8.4371],
    ],


    [
        [325, 0.019877, 2611.6, 2810.3, 5.7596],
        [350, 0.022440, 2699.6, 2924.0, 5.9460],
        [400, 0.026436, 2833.1, 3097.5, 6.2141],
        [450, 0.029782, 2944.5, 3242.4, 6.4219],
        [500, 0.032811, 3047.0, 3375.1, 6.5995],
        [550, 0.035655, 3145.4, 3502.0, 6.7585],
        [600, 0.038378, 3242.0, 3625.8, 6.9045],
        [650, 0.041018, 3338.0, 3748.1, 7.0408],
        [700, 0.043597, 3434.0, 3870.0, 7.1693],
        [800, 0.048629, 3628.2, 4114.5, 7.4085],
        [900, 0.053547, 3826.5, 4362.0, 7.6290],
        [1000, 0.058391, 4029.9, 4613.8, 7.8349],
        [1100, 0.063183, 4238.5, 4870.3, 8.0289],
        [1200, 0.067938, 4452.4, 5131.7, 8.2126],
        [1300, 0.072667, 4671.3, 5398.0, 8.3874],
    ],



    [
        [350, 0.016138, 2624.9, 2826.6, 5.7130],
        [400, 0.020030, 2789.6, 3040.0, 6.0433],
        [450, 0.023019, 2913.7, 3201.5, 6.2749],
        [500, 0.025630, 3023.2, 3343.6, 6.4651],
        [550, 0.028033, 3126.1, 3476.5, 6.6317],
        [600, 0.030306, 3225.8, 3604.6, 6.7828],
        [650, 0.032491, 3324.1, 3730.2, 6.9227],
        [700, 0.034612, 3422.0, 3854.6, 7.0540],
        [800, 0.038724, 3618.8, 4102.8, 7.2967],
        [900, 0.042720, 3818.9, 4352.9, 7.5195],
        [1000, 0.046641, 4023.5, 4606.5, 7.7269],
        [1100, 0.050510, 4233.1, 4864.5, 7.9220],
        [1200, 0.054342, 4447.7, 5127.0, 8.1065],
        [1300, 0.058147, 4667.3, 5394.1, 8.2819],
    ],


    [
        [350, 0.011481, 2520.9, 2693.1, 5.4438],
        [400, 0.015671, 2740.6, 2975.7, 5.8819],
        [450, 0.018477, 2880.8, 3157.9, 6.1434],
        [500, 0.020828, 2998.4, 3310.8, 6.3480],
        [550, 0.022945, 3106.2, 3450.4, 6.5230],
        [600, 0.024921, 3209.3, 3583.1, 6.6796],
        [650, 0.026804, 3310.1, 3712.1, 6.8233],
        [700, 0.028621, 3409.8, 3839.1, 6.9573],
        [800, 0.032121, 3609.3, 4091.1, 7.2037],
        [900, 0.035503, 3811.2, 4343.7, 7.4288],
        [1000, 0.038808, 4017.1, 4599.2, 7.6378],
        [1100, 0.042062, 4227.7, 4858.6, 7.8339],
        [1200, 0.045279, 4443.1, 5122.3, 8.0192],
        [1300, 0.048469, 4663.3, 5390.3, 8.1952],
    ],


    [
        [400, 0.012463, 2684.3, 2902.4, 5.7211],
        [450, 0.015204, 2845.4, 3111.4, 6.0212],
        [500, 0.017385, 2972.4, 3276.7, 6.2424],
        [550, 0.019305, 3085.8, 3423.6, 6.4266],
        [600, 0.021073, 3192.5, 3561.3, 6.5890],
        [650, 0.022742, 3295.8, 3693.8, 6.7366],
        [700, 0.024342, 3397.5, 3823.5, 6.8735],
        [800, 0.027405, 3599.7, 4079.3, 7.1237],
        [900, 0.030348, 3803.5, 4334.6, 7.3511],
        [1000, 0.033215, 4010.7, 4592.0, 7.5616],
        [1100, 0.036029, 4222.3, 4852.8, 7.7588],
        [1200, 0.038806, 4438.5, 5117.6, 7.9449],
        [1300, 0.041556, 4659.2, 5386.5, 8.1215],
    ],


    [
        [400, 0.009950, 2617.9, 2816.9, 5.5526],
        [450, 0.012721, 2807.3, 3061.7, 5.9043],
        [500, 0.014793, 2945.3, 3241.2, 6.1446],
        [550, 0.016571, 3064.7, 3396.2, 6.3390],
        [600, 0.018185, 3175.3, 3539.0, 6.5075],
        [650, 0.019695, 3281.4, 3675.3, 6.6593],
        [700, 0.021134, 3385.1, 3807.8, 6.7991],
        [800, 0.023870, 3590.1, 4067.5, 7.0531],
        [900, 0.026484, 3795.7, 4325.4, 7.2829],
        [1000, 0.029020, 4004.3, 4584.7, 7.4950],
        [1100, 0.031504, 4216.9, 4847.0, 7.6933],
        [1200, 0.033952, 4433.8, 5112.9, 7.8802],
        [1300, 0.036371, 4655.2, 5382.7, 8.0574],
    ],



    [
        [375, 0.001978, 1799.9, 1849.4, 4.0345],
        [400, 0.006005, 2428.5, 2578.7, 5.1400],
        [425, 0.007886, 2607.8, 2805.0, 5.4708],
        [450, 0.009176, 2721.2, 2950.6, 5.6759],
        [500, 0.011143, 2887.3, 3165.9, 5.9643],
        [550, 0.012736, 3020.8, 3339.2, 6.1816],
        [600, 0.014140, 3140.0, 3493.5, 6.3637],
        [650, 0.015430, 3251.9, 3637.7, 6.5243],
        [700, 0.016643, 3359.9, 3776.0, 6.6702],
        [800, 0.018922, 3570.7, 4043.8, 6.9322],
        [900, 0.021075, 3780.2, 4307.1, 7.1668],
        [1000, 0.023150, 3991.5, 4570.2, 7.3821],
        [1100, 0.025172, 4206.1, 4835.4, 7.5825],
        [1200, 0.027157, 4424.6, 5103.5, 7.7710],
        [1300, 0.029115, 4647.2, 5375.1, 7.9494]
    ],


    [
        [375, 0.001792, 1738.1, 1791.9, 3.9313],
        [400, 0.002798, 2068.9, 2152.8, 4.4758],
        [425, 0.005299, 2452.9, 2611.8, 5.1473],
        [450, 0.006737, 2618.9, 2821.0, 5.4422],
        [500, 0.008691, 2824.0, 3084.8, 5.7956],
        [550, 0.010175, 2974.5, 3279.7, 6.0403],
        [600, 0.011445, 3103.4, 3446.8, 6.2373],
        [650, 0.012590, 3221.7, 3599.4, 6.4074],
        [700, 0.013654, 3334.3, 3743.9, 6.5599],
        [800, 0.015628, 3551.2, 4020.0, 6.8301],
        [900, 0.017473, 3764.6, 4288.8, 7.0695],
        [1000, 0.019240, 3978.6, 4555.8, 7.2880],
        [1100, 0.020954, 4195.2, 4823.9, 7.4906],
        [1200, 0.022630, 4415.3, 5094.2, 7.6807],
        [1300, 0.024279, 4639.2, 5367.6, 7.8602],
    ],


    [
        [375, 0.001701, 1702.8, 1762.4, 3.8724],
        [400, 0.002105, 1914.9, 1988.6, 4.2144],
        [425, 0.003434, 2253.3, 2373.5, 4.7751],
        [450, 0.004957, 2497.5, 2671.0, 5.1946],
        [500, 0.006933, 2755.3, 2997.9, 5.6331],
        [550, 0.008348, 2925.8, 3218.0, 5.9093],
        [600, 0.009523, 3065.6, 3399.0, 6.1229],
        [650, 0.010565, 3190.9, 3560.7, 6.3030],
        [700, 0.011523, 3308.3, 3711.6, 6.4623],
        [800, 0.013278, 3531.6, 3996.3, 6.7409],
        [900, 0.014904, 3749.0, 4270.6, 6.9853],
        [1000, 0.016450, 3965.8, 4541.5, 7.2069],
        [1100, 0.017942, 4184.4, 4812.4, 7.4118],
        [1200, 0.019398, 4406.1, 5085.0, 7.6034],
        [1300, 0.020827, 4631.2, 5360.2, 7.7841],
    ],


    [
        [375, 0.001641, 1677.0, 1742.6, 3.8290],
        [400, 0.001911, 1855.0, 1931.4, 4.1145],
        [425, 0.002538, 2097.5, 2199.0, 4.5044],
        [450, 0.003692, 2364.2, 2511.8, 4.9449],
        [500, 0.005623, 2681.6, 2906.5, 5.4744],
        [550, 0.006985, 2875.1, 3154.4, 5.7857],
        [600, 0.008089, 3026.8, 3350.4, 6.0170],
        [650, 0.009053, 3159.5, 3521.6, 6.2078],
        [700, 0.009930, 3282.0, 3679.2, 6.3740],
        [800, 0.011521, 3511.8, 3972.6, 6.6613],
        [900, 0.012980, 3733.3, 4252.5, 6.9107],
        [1000, 0.014360, 3952.9, 4527.3, 7.1355],
        [1100, 0.015686, 4173.7, 4801.1, 7.3425],
        [1200, 0.016976, 4396.9, 5075.9, 7.5357],
        [1300, 0.018239, 4623.3, 5352.8, 7.7175],
    ],


    [
        [375, 0.001560, 1638.6, 1716.6, 3.7642],
        [400, 0.001731, 1787.8, 1874.4, 4.0029],
        [425, 0.002009, 1960.3, 2060.7, 4.2746],
        [450, 0.002487, 2160.3, 2284.7, 4.5896],
        [500, 0.003890, 2528.1, 2722.6, 5.1762],
        [550, 0.005118, 2769.5, 3025.4, 5.5563],
        [600, 0.006108, 2947.1, 3252.6, 5.8245],
        [650, 0.006957, 3095.6, 3443.5, 6.0373],
        [700, 0.007717, 3228.7, 3614.6, 6.2179],
        [800, 0.009073, 3472.2, 3925.8, 6.5225],
        [900, 0.010296, 3702.0, 4216.8, 6.7819],
        [1000, 0.011441, 3927.4, 4499.4, 7.0131],
        [1100, 0.012534, 4152.2, 4778.9, 7.2244],
        [1200, 0.013590, 4378.6, 5058.1, 7.4207],
        [1300, 0.014620, 4607.5, 5338.5, 7.6048],
    ],


    [
        [375, 0.001503, 1609.7, 1699.9, 3.7149],
        [400, 0.001633, 1745.2, 1843.2, 3.9317],
        [425, 0.001816, 1892.9, 2001.8, 4.1630],
        [450, 0.002086, 2055.1, 2180.2, 4.4140],
        [500, 0.002952, 2393.2, 2570.3, 4.9356],
        [550, 0.003955, 2664.6, 2901.9, 5.3517],
        [600, 0.004833, 2866.8, 3156.8, 5.6527],
        [650, 0.005591, 3031.3, 3366.8, 5.8867],
        [700, 0.006265, 3175.4, 3551.3, 6.0814],
        [800, 0.007456, 3432.6, 3880.0, 6.4033],
        [900, 0.008519, 3670.9, 4182.1, 6.6725],
        [1000, 0.009504, 3902.0, 4472.2, 6.9099],
        [1100, 0.010439, 4130.9, 4757.3, 7.1255],
        [1200, 0.011339, 4360.5, 5040.8, 7.3248],
        [1300, 0.012213, 4591.8, 5324.5, 7.5111],
    ],
];

const p = document.getElementById('p');
const t = document.getElementById('t');
const v = document.getElementById('v');
const u = document.getElementById('u');
const h = document.getElementById('h');
const s = document.getElementById('s');
const p2 = document.getElementById('p2');
const t2 = document.getElementById('t2');
const v2 = document.getElementById('v2');
const u2 = document.getElementById('u2');
const h2 = document.getElementById('h2');
const s2 = document.getElementById('s2');
const put1 = document.getElementById('input1');
const put2 = document.getElementById('input2');
// const input1=put1.value;
// const input2=put2.value;

//dont declare the value variables
//access them by their full name


const ii = document.getElementById('click');
const btn = ii.addEventListener('click', check);


function check() {
    let element = document.getElementById('data');
    // console.log('clicked');
    if ((p.checked==true && p2.checked==true) || (t.checked==true && t2.checked==true) || (v.checked==true && v2.checked==true) || (h.checked==true && h2.checked==true) || (s.checked==true && s2.checked==true) || (u.checked==true && u2.checked==true))
    alert('You are not allowed to choose the same property from both the selection sections');


    else if (put1.value == 0 || put2.value == 0) {
        alert("Enter the fields properly");
        element.innerText = ('Enter the specific fields');
    }

    else if ((p.checked == true && put1.value > 22064) || (p2.checked == true && put2.value > 22064) || (t.checked == true && put1.value > 373) || (t2.checked == true && put2.value > 373) ||
        (t.checked == true && put1.value < 0.01) || (t2.checked == true && put2.value < 0.01) || (p.checked == true && put1.value < 1) || (p2.checked == true && put2.value < 1))
        alert("Enter the fields values that lie within the range of the tables provided by Cengel and Boles");


    else if (t.checked == true && p2.checked == true) {
        //put1.value holds the temperature 
        //put2.value holds the pressure
        let pressure = 0;
        if (tp.has(put1.value) == true) {
            //console.log('chiol');
            pressure = tp.get(put1.value);
        }
        else
            pressure = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tp.get(getLowerTemp(put1.value)), tp.get(getUpperTemp(put1.value)));
        // console.log(pressure);
        if (put2.value > pressure)
            element.innerText = ('Compressed water zone');
        else if (put2.value < pressure)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ("Two phase zone");
    }

    //inputs of temperature and pressure has been done


    else if (t.checked == true && v2.checked == true) {
        //put1.value holds temperature
        //put2.value holds s volume
        let vf = 0, vg = 0;
        //console.log((put1.value));
        if (tv.has(put1.value) == true) {
            vf = tv.get(put1.value)[0];
            vg = tv.get(put1.value)[1];
        }
        else {
            vf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tv.get(getLowerTemp(put1.value))[0], tv.get(getUpperTemp(put1.value))[0]);
            vg = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tv.get(getLowerTemp(put1.value))[1], tv.get(getUpperTemp(put1.value))[1]);
        }
        // console.log(vg);
        if (put2.value <= vf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= vg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');

    }

    else if (v.checked == true && t2.checked == true) {
        let vf = 0, vg = 0;
        //console.log((put1.value));
        if (tv.has(put2.value) == true) {
            vf = tv.get(put2.value)[0];
            vg = tv.get(put2.value)[1];
        }
        else {
            vf = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tv.get(getLowerTemp(put2.value))[0], tv.get(getUpperTemp(put2.value))[0]);
            vg = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tv.get(getLowerTemp(put2.value))[1], tv.get(getUpperTemp(put2.value))[1]);
        }
        // console.log(vg);
        if (put1.value <= vf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= vg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }


    else if (t.checked == true && u2.checked == true) {
        //put1.value holds temperature 
        //put2.value holds s energy
        let uf = 0, ug = 0;
        if (tu.has(put1.value) == true) {
            uf = tu.get(put1.value)[0];
            ug = tu.get(put1.value)[1];
        }
        else {
            uf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tu.get(getLowerTemp(put1.value))[0], tu.get(getUpperTemp(put1.value))[0]);
            ug = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tu.get(getLowerTemp(put1.value))[1], tu.get(getUpperTemp(put1.value))[1]);
        }
        // console.log(ug);

        if (put2.value <= uf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= ug)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');

    }


    else if (u.checked == true && t2.checked == true) {
        let uf = 0, ug = 0;
        if (tu.has(put2.value) == true) {
            uf = tu.get(put2.value)[0];
            ug = tu.get(put2.value)[1];
        }
        else {
            uf = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tu.get(getLowerTemp(put2.value))[0], tu.get(getUpperTemp(put2.value))[0]);
            ug = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tu.get(getLowerTemp(put2.value))[1], tu.get(getUpperTemp(put2.value))[1]);
        }
        // console.log(ug);

        if (put1.value <= uf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= ug)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }
    //temperature and internal enrgy plots done 

    else if (t.checked == true && h2.checked == true) {
        //put1.value holds temperature 
        //put2.value holds s energy
        let hf = 0, hg = 0;
        if (th.has(put1.value) == true) {
            hf = th.get(put1.value)[0];
            hg = th.get(put1.value)[1];
        }
        else {
            hf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), th.get(getLowerTemp(put1.value))[0], th.get(getUpperTemp(put1.value))[0]);
            hg = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), th.get(getLowerTemp(put1.value))[1], th.get(getUpperTemp(put1.value))[1]);
        }
        // console.log(hg);

        if (put2.value <= hf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= hg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');

    }

    else if (h.checked == true && t2.checked == true) {
        let hf = 0, hg = 0;
        if (th.has(put2.value) == true) {
            hf = th.get(put2.value)[0];
            hg = th.get(put2.value)[1];
        }
        else {
            hf = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), th.get(getLowerTemp(put2.value))[0], th.get(getUpperTemp(put2.value))[0]);
            hg = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), th.get(getLowerTemp(put2.value))[1], th.get(getUpperTemp(put2.value))[1]);
        }
        // console.log(hg);

        if (put1.value <= hf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= hg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }

    else if (t.checked == true && s2.checked == true) {
        //put1.value holds temperature 
        //put2.value holds s energy
        let sf = 0, sg = 0;
        if (ts.has(put1.value) == true) {
            sf = tu.get(put1.value)[0];
            sg = tu.get(put1.value)[1];
        }
        else {
            sf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), ts.get(getLowerTemp(put1.value))[0], ts.get(getUpperTemp(put1.value))[0]);
            sg = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), ts.get(getLowerTemp(put1.value))[1], ts.get(getUpperTemp(put1.value))[1]);
        }
        // console.log(sg);

        if (put2.value <= sf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= sg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');

    }

    else if (s.checked == true && t2.checked == true) {
        let sf = 0, sg = 0;
        if (ts.has(put2.value) == true) {
            sf = tu.get(put2.value)[0];
            sg = tu.get(put2.value)[1];
        }
        else {
            sf = interpolate(put2.value, getLowerTemp(put1.value), getUpperTemp(put2.value), ts.get(getLowerTemp(put2.value))[0], ts.get(getUpperTemp(put2.value))[0]);
            sg = interpolate(put2.value, getLowerTemp(put1.value), getUpperTemp(put2.value), ts.get(getLowerTemp(put2.value))[1], ts.get(getUpperTemp(put2.value))[1]);
        }
        // console.log(sg);

        if (put1.value <= sf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= sg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }

    //all plots of temperature are done 

    else if (t2.checked == true && p.checked == true) {
        //put1.value holds the temperature 
        //put2.value holds the pressure
        let pressure = 0;
        if (tp.has(put2.value) == true)
            pressure = tp.get(put2.value);
        else
            pressure = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tp.get(getLowerTemp(put2.value)), tp.get(getUpperTemp(put2.value)));
        //console.log(pressure);
        if (put1.value > pressure)
            element.innerText = ('Compressed water zone');
        else if (put1.value < pressure)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ("Two phase zone");
    }

    //pressure vs temperature plots have been dealt with

    else if (p.checked == true && v2.checked == true) {
        //put1.value holds pressure
        //put2.value holds s volume
        let vf = 0, vg = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (pv.has(put1.value) == true) {
            // console.log('hello');
            vf = pv.get(put1.value)[0];
            vg = pv.get(put1.value)[1];
        }
        else {
            vf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pv.get(getLowerPressure(put1.value))[0], pv.get(getUpperPressure(put1.value))[0]);
            vg = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pv.get(getLowerPressure(put1.value))[1], pv.get(getUpperPressure(put1.value))[1]);
        }
        // console.log(vg);
        if (put2.value <= vf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= vg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }


    else if (p2.checked == true && v.checked == true) {
        let vf = 0, vg = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (pv.has(put2.value) == true) {
            // console.log('hello');
            vf = pv.get(put2.value)[0];
            vg = pv.get(put2.value)[1];
        }
        else {
            vf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pv.get(getLowerPressure(put2.value))[0], pv.get(getUpperPressure(put2.value))[0]);
            vg = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pv.get(getLowerPressure(put2.value))[1], pv.get(getUpperPressure(put2.value))[1]);
        }
        // console.log(vg);
        if (put1.value <= vf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= vg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }

    else if (p.checked == true && u2.checked == true) {
        //put1.value holds pressure
        //put2.value holds s volume
        let uf = 0, ug = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (pu.has(put1.value) == true) {
            // console.log('hello');
            uf = pu.get(put1.value)[0];
            ug = pu.get(put1.value)[1];
        }
        else {
            uf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pu.get(getLowerPressure(put1.value))[0], pu.get(getUpperPressure(put1.value))[0]);
            ug = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pu.get(getLowerPressure(put1.value))[1], pu.get(getUpperPressure(put1.value))[1]);
        }
        // console.log(ug);
        if (put2.value <= uf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= ug)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }


    else if (p2.checked == true && u.checked == true) {
        let uf = 0, ug = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (pu.has(put2.value) == true) {
            // console.log('hello');
            uf = pu.get(put2.value)[0];
            ug = pu.get(put2.value)[1];
        }
        else {
            uf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pu.get(getLowerPressure(put2.value))[0], pu.get(getUpperPressure(put2.value))[0]);
            ug = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pu.get(getLowerPressure(put2.value))[1], pu.get(getUpperPressure(put2.value))[1]);
        }
        // console.log(ug);
        if (put1.value <= uf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= ug)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }
    //p vs u done and handled

    else if (p.checked == true && h2.checked == true) {
        //put1.value holds pressure
        //put2.value holds s volume
        let hf = 0, hg = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (ph.has(put1.value) == true) {
            // console.log('hello');
            hf = ph.get(put1.value)[0];
            hg = ph.get(put1.value)[1];
        }
        else {
            hf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ph.get(getLowerPressure(put1.value))[0], ph.get(getUpperPressure(put1.value))[0]);
            hg = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ph.get(getLowerPressure(put1.value))[1], ph.get(getUpperPressure(put1.value))[1]);
        }
        // console.log(hg);
        if (put2.value <= hf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= hg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }


    else if (p2.checked == true && h.checked == true) {
        let hf = 0, hg = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (ph.has(put2.value) == true) {
            // console.log('hello');
            hf = ph.get(put2.value)[0];
            hg = ph.get(put2.value)[1];
        }
        else {
            hf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ph.get(getLowerPressure(put2.value))[0], ph.get(getUpperPressure(put2.value))[0]);
            hg = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ph.get(getLowerPressure(put2.value))[1], ph.get(getUpperPressure(put2.value))[1]);
        }
        // console.log(hg);
        if (put1.value <= hf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= hg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }

    //p vs h handled


    else if (p.checked == true && s2.checked == true) {
        //put1.value holds pressure
        //put2.value holds s volume
        let sf = 0, sg = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (ps.has(put1.value) == true) {
            // console.log('hello');
            sf = ps.get(put1.value)[0];
            sg = ps.get(put1.value)[1];
        }
        else {
            sf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ps.get(getLowerPressure(put1.value))[0], ps.get(getUpperPressure(put1.value))[0]);
            sg = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ps.get(getLowerPressure(put1.value))[1], ps.get(getUpperPressure(put1.value))[1]);
        }
        // console.log(sg);
        if (put2.value <= sf)
            element.innerText = ('Compressed water zone');
        else if (put2.value >= sg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }


    else if (p2.checked == true && s.checked == true) {
        let sf = 0, sg = 0;
        // console.log(getLowerPressure(put1.value));
        // console.log(getUpperPressure(put1.value));
        if (ps.has(put2.value) == true) {
            // console.log('hello');
            sf = ps.get(put2.value)[0];
            sg = ps.get(put2.value)[1];
        }
        else {
            sf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ps.get(getLowerPressure(put2.value))[0], ps.get(getUpperPressure(put2.value))[0]);
            sg = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ps.get(getLowerPressure(put2.value))[1], ps.get(getUpperPressure(put2.value))[1]);
        }
        // console.log(sg);
        if (put1.value <= sf)
            element.innerText = ('Compressed water zone');
        else if (put1.value >= sg)
            element.innerText = ('Superheated zone');
        else
            element.innerText = ('Two phase zone');
    }

    //pressure vs s plots handled;


    else if (v.checked == true && u2.checked == true) {
        //put1.value holds v and put2.value holds u
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < vu.length; i++) {
            let quality1 = (put1.value - vu[i][0]) / (vu[i][1] - vu[i][0]);
            let quality2 = (put2.value - vu[i][2]) / vu[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    else if (v2.checked == true && u.checked == true) {
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < vu.length; i++) {
            let quality1 = (put2.value - vu[i][0]) / (vu[i][1] - vu[i][0]);
            let quality2 = (put1.value - vu[i][2]) / vu[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }
    //vu done

    else if (v.checked == true && h2.checked == true) {
        //put1.value holds v and put2.value holds u
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < vh.length; i++) {
            let quality1 = (put1.value - vh[i][0]) / (vh[i][1] - vh[i][0]);
            let quality2 = (put2.value - vh[i][2]) / vh[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    else if (v2.checked == true && h.checked == true) {
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < vh.length; i++) {
            let quality1 = (put2.value - vh[i][0]) / (vh[i][1] - vh[i][0]);
            let quality2 = (put1.value - vh[i][2]) / vh[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }

    //vh done

    else if (v.checked == true && s2.checked == true) {
        //put1.value holds v and put2.value holds u
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < vs.length; i++) {
            let quality1 = (put1.value - vs[i][0]) / (vs[i][1] - vs[i][0]);
            let quality2 = (put2.value - vs[i][2]) / vs[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    else if (v2.checked == true && s.checked == true) {
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < vs.length; i++) {
            let quality1 = (put2.value - vs[i][0]) / (vs[i][1] - vs[i][0]);
            let quality2 = (put1.value - vs[i][2]) / vs[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }

    //vs done


    else if (u.checked == true && h2.checked == true) {
        //put1.value holds v and put2.value holds u
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < uh.length; i++) {
            let quality1 = (put1.value - uh[i][0]) / uh[i][1];
            let quality2 = (put2.value - uh[i][2]) / uh[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }

    //u-h done 

    else if (u2.checked == true && h.checked == true) {
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < uh.length; i++) {
            let quality1 = (put2.value - uh[i][0]) / uh[i][1];
            let quality2 = (put1.value - uh[i][2]) / uh[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    else if (u.checked == true && s2.checked == true) {
        //put1.value holds v and put2.value holds u
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < us.length; i++) {
            let quality1 = (put1.value - us[i][0]) / us[i][1];
            let quality2 = (put2.value - us[i][2]) / us[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    else if (u2.checked == true && s.checked == true) {
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < us.length; i++) {
            let quality1 = (put2.value - us[i][0]) / us[i][1];
            let quality2 = (put1.value - us[i][2]) / us[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    //u-s done and dusted

    else if (h.checked == true && s2.checked == true) {
        //put1.value holds v and put2.value holds u
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < hs.length; i++) {
            let quality1 = (put1.value - hs[i][0]) / hs[i][1];
            let quality2 = (put2.value - hs[i][2]) / hs[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }


    else if (h2.checked == true && s.checked == true) {
        let c = false; let flag = 10000;
        let lquality1 = 0, lquality2 = 0;
        for (let i = 0; i < hs.length; i++) {
            let quality1 = (put2.value - hs[i][0]) / hs[i][1];
            let quality2 = (put1.value - hs[i][2]) / hs[i][3];
            let diff = quality1 - quality2;
            if (diff == 0)
                c = true;           //well within the two phase zone if c == true
            if (c == true)
                break;
            if (flag > (Math.abs(quality1 - quality2))) {
                flag = Math.abs(quality1 - quality2);
                lquality1 = quality1;
                lquality2 = quality2;
            }
        }
        if (c == true)
            element.innerText = ('Two phase zone');
        else if (lquality2 - lquality1 == flag)
            element.innerText = ("Compressed water zone");
        else
            element.innerText = ('Superheated zone');
    }

    //h-s plane done and dusted   

    else
        console.log('no inputs found');

};

// The above is only for zone Selection

const pp = document.getElementById('pp');
const tt = document.getElementById('tt');
const vv = document.getElementById('vv');
const uu = document.getElementById('uu');
const hh = document.getElementById('hh');
const ss = document.getElementById('ss');
const i1 = document.getElementById('zone1input');
const i2 = document.getElementById('zone2input');
const click2 = document.getElementById('click2');
const btn2 = click2.addEventListener('click', check2);




// if (pt.has(i1.value)==false)
// console.log('contained2');
// console.log(i1.value);


function check2() {

    let element= document.getElementById('phase2');
    console.log('clicked');


    if (i2.value < 0 || i2.value > 1)
        alert('Wrong value of vapor quality');

    else if (i1.value == 0)
        alert('Enter the values of the fields properly');

    else if (pp.checked == true && (i1.value > 22064 || i1.value < 0.01)) {
        alert('Enter the value of pressure that is within range');
    }

    else if (tt.checked == true && (i1.value < 0.01 || i1.value > 373.15)) {
        alert('Enter the value of the temperature that is within range');
    }

    else if (pp.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        if (pt.has(i1.value) == true) {
            kelvin = pt.get(i1.value);
            cube = specific(pv.get(i1.value)[0], (pv.get(i1.value)[1] - pv.get(i1.value)[0]), i2.value);
            joule = specific(pu.get(i1.value)[0], pu.get(i1.value)[1], i2.value);
            enth = specific(ph.get(i1.value)[0], ph.get(i1.value)[1], i2.value);
            ent = specific(ps.get(i1.value)[0], ps.get(i1.value)[1], i2.value);
        }
        //if pressure not present in table
        else {
            let l = getLowerPressure(i1.value);
            let u = getUpperPressure(i1.value);
            let kelvin1 = pt.get(l);
            let kelvin2 = pt.get(u);
            kelvin = interpolate(i1.value, l, u, kelvin1, kelvin2);
            let cube1 = specific(pv.get(l)[0], (pv.get(l)[1] - pv.get(l)[0]), i2.value);
            let cube2 = specific(pv.get(u)[0], (pv.get(u)[1] - pv.get(u)[0]), i2.value);
            cube = interpolate(i1.value, l, u, cube1, cube2);
            let joule1 = specific(pu.get(l)[0], (pu.get(l)[1] - pu.get(l)[0]), i2.value);
            let joule2 = specific(pu.get(u)[0], (pu.get(u)[1] - pu.get(u)[0]), i2.value);
            joule = interpolate(i1.value, l, u, joule1, joule2);
            let enth1 = specific(ph.get(l)[0], (ph.get(l)[1] - ph.get(l)[0]), i2.value);
            let enth2 = specific(ph.get(u)[0], (ph.get(u)[1] - ph.get(u)[0]), i2.value);
            enth = interpolate(i1.value, l, u, enth1, enth2);
            let ent1 = specific(ps.get(l)[0], (ps.get(l)[1] - ps.get(l)[0]), i2.value);
            let ent2 = specific(ps.get(u)[0], (ps.get(u)[1] - ps.get(u)[0]), i2.value);
            ent = interpolate(i1.value, l, u, ent1, ent2);

        }

        element.innerText=(' Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);
        // element.innerText=('Specific Volume = '+cube);
        // element.innerText=('Specific Internal Energy = '+joule);
        // element.innerText=('Specific Enthalpy = '+enth);
        // element.innerText=('Specific Entropy = '+ent);
        // // element.innerText=('Specific Volume = '+cube);
        // console.log(kelvin);
        // console.log(cube);
        // console.log(joule);
        // console.log(enth);
        // console.log(ent);
        // console.log(kelvin);
        // console.log('abhishek');
    }

    //pressure plots dealt with successfully

    else if (tt.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        if (tp.has(i1.value) == true) {
            pascal = tp.get(i1.value);
            cube = specific(tv.get(i1.value)[0], (tv.get(i1.value)[1] - tv.get(i1.value)[0]), i2.value);
            joule = specific(tu.get(i1.value)[0], tu.get(i1.value)[1], i2.value);
            enth = specific(th.get(i1.value)[0], th.get(i1.value)[1], i2.value);
            ent = specific(ts.get(i1.value)[0], ts.get(i1.value)[1], i2.value);
        }
        //if pressure not present in table
        else {
            let l = getLowerTemp(i1.value);
            let u = getUpperTemp(i1.value);
            let pascal1 = tp.get(l);
            let pascal2 = tp.get(u);
            pascal = interpolate(i1.value, l, u, pascal1, pascal2);
            let cube1 = specific(tv.get(l)[0], (tv.get(l)[1] - tv.get(l)[0]), i2.value);
            let cube2 = specific(tv.get(u)[0], (tv.get(u)[1] - tv.get(u)[0]), i2.value);
            cube = interpolate(i1.value, l, u, cube1, cube2);
            let joule1 = specific(tu.get(l)[0], (tu.get(l)[1] - tu.get(l)[0]), i2.value);
            let joule2 = specific(tu.get(u)[0], (tu.get(u)[1] - tu.get(u)[0]), i2.value);
            joule = interpolate(i1.value, l, u, joule1, joule2);
            let enth1 = specific(th.get(l)[0], (th.get(l)[1] - th.get(l)[0]), i2.value);
            let enth2 = specific(th.get(u)[0], (th.get(u)[1] - th.get(u)[0]), i2.value);
            enth = interpolate(i1.value, l, u, enth1, enth2);
            let ent1 = specific(ts.get(l)[0], (ts.get(l)[1] - ts.get(l)[0]), i2.value);
            let ent2 = specific(ts.get(u)[0], (ts.get(u)[1] - ts.get(u)[0]), i2.value);
            ent = interpolate(i1.value, l, u, ent1, ent2);

        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);


        // console.log(pascal);
        // console.log(cube);
        // console.log(joule);
        // console.log(enth);
        // console.log(ent);
        // console.log(kelvin);
        // console.log('abhishek');
    }

    //approximation being used over here

    else if (vv.checked == true) {
        let kelvin = 0, pascal = 0, joule = 0, enth = 0, ent = 0;
        for (var [key, [value1, value2]] of tv.entries()) {
            let close = xcalculator(i1.value, value1, value2);
            if (Math.abs(close - i2.value) <= 0.01)
                kelvin = key;
        }

        pascal = tp.get(kelvin);
        cube = specific(tv.get(kelvin)[0], (tv.get(kelvin)[1] - tv.get(kelvin)[0]), i2.value);
        joule = specific(tu.get(kelvin)[0], tu.get(kelvin)[1], i2.value);
        enth = specific(th.get(kelvin)[0], th.get(kelvin)[1], i2.value);
        ent = specific(ts.get(kelvin)[0], ts.get(kelvin)[1], i2.value);
        // element.innerText=('bhakk');
        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);
        console.log(kelvin);
    }

    //specific volume handled

    else if (uu.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, enth = 0, ent = 0;
        for (var [key, [value1, value2]] of tu.entries()) {
            let close = xcalculator(i1.value, value1, value2);
            if (Math.abs(close - i2.value) <= 0.001)
                kelvin = key;
        }

        pascal = tp.get(kelvin);
        cube = specific(tv.get(kelvin)[0], (tv.get(kelvin)[1] - tv.get(kelvin)[0]), i2.value);
        joule = specific(tu.get(kelvin)[0], tu.get(kelvin)[1], i2.value);
        enth = specific(th.get(kelvin)[0], th.get(kelvin)[1], i2.value);
        ent = specific(ts.get(kelvin)[0], ts.get(kelvin)[1], i2.value);

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //internal energy handled

    else if (hh.checked == true) {
        let kelvin = 0, pascal = 0, joule = 0, enth = 0, ent = 0;
        for (var [key, [value1, value2]] of th.entries()) {
            let close = xcalculator(i1.value, value1, value2);
            if (Math.abs(close - i2.value) <= 0.01)
                kelvin = key;
        }

        pascal = tp.get(kelvin);
        cube = specific(tv.get(kelvin)[0], (tv.get(kelvin)[1] - tv.get(kelvin)[0]), i2.value);
        joule = specific(tu.get(kelvin)[0], tu.get(kelvin)[1], i2.value);
        enth = specific(th.get(kelvin)[0], th.get(kelvin)[1], i2.value);
        ent = specific(ts.get(kelvin)[0], ts.get(kelvin)[1], i2.value);

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+cube+ '\n Specific Entropy = '+ent);

    }

    //enthalpy handled 

    else if (ss.checked == true) {
        let kelvin = 0, pascal = 0, joule = 0, enth = 0, ent = 0;
        for (var [key, [value1, value2]] of ts.entries()) {
            let close = xcalculator(i1.value, value1, value2);
            if (Math.abs(close - i2.value) <= 0.01)
                kelvin = key;
        }

        pascal = tp.get(kelvin);
        cube = specific(tv.get(kelvin)[0], (tv.get(kelvin)[1] - tv.get(kelvin)[0]), i2.value);
        joule = specific(tu.get(kelvin)[0], tu.get(kelvin)[1], i2.value);
        enth = specific(th.get(kelvin)[0], th.get(kelvin)[1], i2.value);
        ent = specific(ts.get(kelvin)[0], ts.get(kelvin)[1], i2.value);

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);

    }


};

//the above is for superheadted zone section

const pp1 = document.getElementById('pp1');
const tt1 = document.getElementById('tt1');
const vv1 = document.getElementById('vv1');
const uu1 = document.getElementById('uu1');
const hh1 = document.getElementById('hh1');
const ss1 = document.getElementById('ss1');

const pp2 = document.getElementById('pp2');
const tt2 = document.getElementById('tt2');
const vv2 = document.getElementById('vv2');
const uu2 = document.getElementById('uu2');
const hh2 = document.getElementById('hh2');
const ss2 = document.getElementById('ss2');

const fi = document.getElementById('zone3input');
const li = document.getElementById('zone4input');

const click3 = document.getElementById('click3');
const btn3 = click3.addEventListener('click', check3);

//atm[0] stands for pressure 
//ptable[0][0][1] stands for specific volume 
//ptable[0][0][2] stands for internal energy 
//ptable[0][0][0] stands for tempertaure
//ptable [0][0][3] stands for enthalpy
//ptable [0][0][4] stands for entropy

function check3() {
    console.log('clicked');

    let element= document.getElementById('phase3');

    if ((pp1.checked==true && pp2.checked==true) || (tt1.checked==true && tt2.checked==true) || (vv1.checked==true && vv2.checked==true) || (hh1.checked==true && hh2.checked==true) || (ss1.checked==true && ss2.checked==true) || (uu1.checked==true && uu2.checked==true))
    alert('You are not allowed to choose the same property from both the selection sections');


    else if (fi.value <= 0 || li.value <= 0)
        alert('Enter the correct value for the properties');

    else if (pp1.checked == true && tt2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= fi.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == fi.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= li.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][0] == li.value) {
                cube = ptable[i][j][1];
                joule = ptable[i][j][2];
                enth = ptable[i][j][3];
                ent = ptable[i][j][4];
            }
            else {
                cube = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                joule = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                enth = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                ent = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][0] >= li.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][0] >= li.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][0] == li.value) {
                cube1 = ptable[i - 1][j][1];
                joule1 = ptable[i - 1][j][2];
                enth1 = ptable[i - 1][j][3];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                cube1 = interpolate(li.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                joule1 = interpolate(li.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                enth1 = interpolate(li.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
                ent1 = interpolate(li.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][0] == li.value) {
                cube2 = ptable[i][k][1];
                joule2 = ptable[i][k][2];
                enth2 = ptable[i][k][3];
                ent2 = ptable[i][k][4];
            }
            else {
                cube2 = interpolate(li.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][1], ptable[i][k][1]);
                joule2 = interpolate(li.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][2], ptable[i][k][2]);
                enth2 = interpolate(li.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][3], ptable[i][k][3]);
                ent2 = interpolate(li.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            cube = interpolate(fi.value, atm[i - 1], atm[i], cube1, cube2);
            joule = interpolate(fi.value, atm[i - 1], atm[i], joule1, joule2);
            enth = interpolate(fi.value, atm[i - 1], atm[i], enth1, enth2);
            ent = interpolate(fi.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //pressure and temperature input has been dealt with

    else if (pp2.checked == true && tt1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= li.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == li.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= fi.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][0] == fi.value) {
                cube = ptable[i][j][1];
                joule = ptable[i][j][2];
                enth = ptable[i][j][3];
                ent = ptable[i][j][4];
            }
            else {
                cube = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                joule = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                enth = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                ent = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][0] >= fi.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][0] >= fi.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][0] == fi.value) {
                cube1 = ptable[i - 1][j][1];
                joule1 = ptable[i - 1][j][2];
                enth1 = ptable[i - 1][j][3];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                cube1 = interpolate(fi.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                joule1 = interpolate(fi.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                enth1 = interpolate(fi.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
                ent1 = interpolate(fi.value, ptable[i - 1][j - 1][0], ptable[i - 1][j][0], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][0] == fi.value) {
                cube2 = ptable[i][k][1];
                joule2 = ptable[i][k][2];
                enth2 = ptable[i][k][3];
                ent2 = ptable[i][k][4];
            }
            else {
                cube2 = interpolate(fi.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][1], ptable[i][k][1]);
                joule2 = interpolate(fi.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][2], ptable[i][k][2]);
                enth2 = interpolate(fi.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][3], ptable[i][k][3]);
                ent2 = interpolate(fi.value, ptable[i][k - 1][0], ptable[i][k][0], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            cube = interpolate(li.value, atm[i - 1], atm[i], cube1, cube2);
            joule = interpolate(li.value, atm[i - 1], atm[i], joule1, joule2);
            enth = interpolate(li.value, atm[i - 1], atm[i], enth1, enth2);
            ent = interpolate(li.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //temperature and pressure has been dealt with


    else if (pp1.checked == true && vv2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= fi.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == fi.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][1] >= li.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][1] == li.value) {
                kelvin = ptable[i][j][0];
                joule = ptable[i][j][2];
                enth = ptable[i][j][3];
                ent = ptable[i][j][4];
            }
            else {
                kelvin = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                joule = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                enth = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                ent = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][1] >= li.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][1] >= li.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][1] == li.value) {
                kelvin1 = ptable[i - 1][j][0];
                joule1 = ptable[i - 1][j][2];
                enth1 = ptable[i - 1][j][3];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                kelvin1 = interpolate(li.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                joule1 = interpolate(li.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                enth1 = interpolate(li.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
                ent1 = interpolate(li.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][1] == li.value) {
                kelvin2 = ptable[i][k][0];
                joule2 = ptable[i][k][2];
                enth2 = ptable[i][k][3];
                ent2 = ptable[i][k][4];
            }
            else {
                kelvin2 = interpolate(li.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][0], ptable[i][k][0]);
                joule2 = interpolate(li.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][2], ptable[i][k][2]);
                enth2 = interpolate(li.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][3], ptable[i][k][3]);
                ent2 = interpolate(li.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            kelvin = interpolate(fi.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            joule = interpolate(fi.value, atm[i - 1], atm[i], joule1, joule2);
            enth = interpolate(fi.value, atm[i - 1], atm[i], enth1, enth2);
            ent = interpolate(fi.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }


    else if (pp2.checked == true && vv1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= li.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == li.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][1] >= fi.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][1] == fi.value) {
                kelvin = ptable[i][j][0];
                joule = ptable[i][j][2];
                enth = ptable[i][j][3];
                ent = ptable[i][j][4];
            }
            else {
                kelvin = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                joule = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                enth = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                ent = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][1] >= fi.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][1] >= fi.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][1] == fi.value) {
                kelvin1 = ptable[i - 1][j][0];
                joule1 = ptable[i - 1][j][2];
                enth1 = ptable[i - 1][j][3];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                kelvin1 = interpolate(fi.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                joule1 = interpolate(fi.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                enth1 = interpolate(fi.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
                ent1 = interpolate(fi.value, ptable[i - 1][j - 1][1], ptable[i - 1][j][1], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][1] == fi.value) {
                kelvin2 = ptable[i][k][0];
                joule2 = ptable[i][k][2];
                enth2 = ptable[i][k][3];
                ent2 = ptable[i][k][4];
            }
            else {
                kelvin2 = interpolate(fi.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][0], ptable[i][k][0]);
                joule2 = interpolate(fi.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][2], ptable[i][k][2]);
                enth2 = interpolate(fi.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][3], ptable[i][k][3]);
                ent2 = interpolate(fi.value, ptable[i][k - 1][1], ptable[i][k][1], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            kelvin = interpolate(li.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            joule = interpolate(li.value, atm[i - 1], atm[i], joule1, joule2);
            enth = interpolate(li.value, atm[i - 1], atm[i], enth1, enth2);
            ent = interpolate(li.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //pressure and specific volume plots handled

    else if (pp1.checked == true && uu2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= fi.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == fi.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][2] >= li.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][2] == li.value) {
                kelvin = ptable[i][j][0];
                cube = ptable[i][j][1];
                enth = ptable[i][j][3];
                ent = ptable[i][j][4];
            }
            else {
                kelvin = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][0], ptable[i][j][0]);
                cube = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][1], ptable[i][j][1]);
                enth = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][3], ptable[i][j][3]);
                ent = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][2] >= li.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][2] >= li.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][2] == li.value) {
                kelvin1 = ptable[i - 1][j][0];
                cube1 = ptable[i - 1][j][1];
                enth1 = ptable[i - 1][j][3];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                kelvin1 = interpolate(li.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                cube1 = interpolate(li.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                enth1 = interpolate(li.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
                ent1 = interpolate(li.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][2] == li.value) {
                kelvin2 = ptable[i][k][0];
                cube2 = ptable[i][k][1];
                enth2 = ptable[i][k][3];
                ent2 = ptable[i][k][4];
            }
            else {
                kelvin2 = interpolate(li.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][0], ptable[i][k][0]);
                cube2 = interpolate(li.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][1], ptable[i][k][1]);
                enth2 = interpolate(li.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][3], ptable[i][k][3]);
                ent2 = interpolate(li.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            kelvin = interpolate(fi.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            cube = interpolate(fi.value, atm[i - 1], atm[i], cube1, cube2);
            enth = interpolate(fi.value, atm[i - 1], atm[i], enth1, enth2);
            ent = interpolate(fi.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //pressure and energy plots dealt with

    else if (pp2.checked == true && uu1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= li.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == li.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][2] >= fi.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][2] == fi.value) {
                kelvin = ptable[i][j][0];
                cube = ptable[i][j][1];
                enth = ptable[i][j][3];
                ent = ptable[i][j][4];
            }
            else {
                kelvin = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][0], ptable[i][j][0]);
                cube = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][1], ptable[i][j][1]);
                enth = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][3], ptable[i][j][3]);
                ent = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][2] >= fi.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][2] >= fi.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][2] == fi.value) {
                kelvin1 = ptable[i - 1][j][0];
                cube1 = ptable[i - 1][j][1];
                enth1 = ptable[i - 1][j][3];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                kelvin1 = interpolate(fi.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                cube1 = interpolate(fi.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                enth1 = interpolate(fi.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
                ent1 = interpolate(fi.value, ptable[i - 1][j - 1][2], ptable[i - 1][j][2], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][2] == fi.value) {
                kelvin2 = ptable[i][k][0];
                cube2 = ptable[i][k][1];
                enth2 = ptable[i][k][3];
                ent2 = ptable[i][k][4];
            }
            else {
                kelvin2 = interpolate(fi.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][0], ptable[i][k][0]);
                cube2 = interpolate(fi.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][1], ptable[i][k][1]);
                enth2 = interpolate(fi.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][3], ptable[i][k][3]);
                ent2 = interpolate(fi.value, ptable[i][k - 1][2], ptable[i][k][2], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            kelvin = interpolate(li.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            cube = interpolate(li.value, atm[i - 1], atm[i], cube1, cube2);
            enth = interpolate(li.value, atm[i - 1], atm[i], enth1, enth2);
            ent = interpolate(li.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }


    else if (pp1.checked == true && hh2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= fi.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == fi.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][3] >= li.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][3] == li.value) {
                kelvin = ptable[i][j][0];
                cube = ptable[i][j][1];
                joule = ptable[i][j][2];
                ent = ptable[i][j][4];
            }
            else {
                kelvin = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][0], ptable[i][j][0]);
                cube = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][1], ptable[i][j][1]);
                joule = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][2], ptable[i][j][2]);
                ent = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][3] >= li.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][3] >= li.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][3] == li.value) {
                kelvin1 = ptable[i - 1][j][0];
                cube1 = ptable[i - 1][j][1];
                joule1 = ptable[i - 1][j][2];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                kelvin1 = interpolate(li.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                cube1 = interpolate(li.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                joule1 = interpolate(li.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                ent1 = interpolate(li.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][3] == li.value) {
                kelvin2 = ptable[i][k][0];
                cube2 = ptable[i][k][1];
                joule2 = ptable[i][k][2];
                ent2 = ptable[i][k][4];
            }
            else {
                kelvin2 = interpolate(li.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][0], ptable[i][k][0]);
                cube2 = interpolate(li.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][1], ptable[i][k][1]);
                joule2 = interpolate(li.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][2], ptable[i][k][2]);
                ent2 = interpolate(li.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            kelvin = interpolate(fi.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            cube = interpolate(fi.value, atm[i - 1], atm[i], cube1, cube2);
            joule = interpolate(fi.value, atm[i - 1], atm[i], joule1, joule2);
            ent = interpolate(fi.value, atm[i - 1], atm[i], ent1, ent2);

        }

        // console.log(kelvin);
        // console.log(cube);
        // console.log(joule);
        // console.log(ent);

        element.innerText=(' Temperature = '+kelvin+'\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Entropy = '+ent);

    }


    else if (pp2.checked == true && hh1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= li.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == li.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][3] >= fi.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][3] == fi.value) {
                kelvin = ptable[i][j][0];
                cube = ptable[i][j][1];
                joule = ptable[i][j][2];
                ent = ptable[i][j][4];
            }
            else {
                kelvin = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][0], ptable[i][j][0]);
                cube = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][1], ptable[i][j][1]);
                joule = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][2], ptable[i][j][2]);
                ent = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][4], ptable[i][j][4]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][3] >= fi.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][3] >= fi.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][3] == fi.value) {
                kelvin1 = ptable[i - 1][j][0];
                cube1 = ptable[i - 1][j][1];
                joule1 = ptable[i - 1][j][2];
                ent1 = ptable[i - 1][j][4];
            }
            else {
                kelvin1 = interpolate(fi.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                cube1 = interpolate(fi.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                joule1 = interpolate(fi.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                ent1 = interpolate(fi.value, ptable[i - 1][j - 1][3], ptable[i - 1][j][3], ptable[i - 1][j - 1][4], ptable[i - 1][j][4]);
            }


            if (ptable[i][k][3] == fi.value) {
                kelvin2 = ptable[i][k][0];
                cube2 = ptable[i][k][1];
                joule2 = ptable[i][k][2];
                ent2 = ptable[i][k][4];
            }
            else {
                kelvin2 = interpolate(fi.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][0], ptable[i][k][0]);
                cube2 = interpolate(fi.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][1], ptable[i][k][1]);
                joule2 = interpolate(fi.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][2], ptable[i][k][2]);
                ent2 = interpolate(fi.value, ptable[i][k - 1][3], ptable[i][k][3], ptable[i][k - 1][4], ptable[i][k][4]);
            }

            kelvin = interpolate(li.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            cube = interpolate(li.value, atm[i - 1], atm[i], cube1, cube2);
            joule = interpolate(li.value, atm[i - 1], atm[i], joule1, joule2);
            ent = interpolate(li.value, atm[i - 1], atm[i], ent1, ent2);

        }

        element.innerText=(' Temperature = '+kelvin+'\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Entropy = '+ent);

    }

    //pressure and enthalpy plots dealt with

    else if (pp1.checked == true && ss2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= fi.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == fi.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][4] >= li.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][4] == li.value) {
                kelvin = ptable[i][j][0];
                cube = ptable[i][j][1];
                joule = ptable[i][j][2];
                enth = ptable[i][j][3];
            }
            else {
                kelvin = interpolate(li.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][0], ptable[i][j][0]);
                cube = interpolate(li.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][1], ptable[i][j][1]);
                joule = interpolate(li.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][2], ptable[i][j][2]);
                enth = interpolate(li.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][3], ptable[i][j][3]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][4] >= li.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][4] >= li.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][4] == li.value) {
                kelvin1 = ptable[i - 1][j][0];
                cube1 = ptable[i - 1][j][1];
                joule1 = ptable[i - 1][j][2];
                enth1 = ptable[i - 1][j][3];
            }
            else {
                kelvin1 = interpolate(li.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                cube1 = interpolate(li.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                joule1 = interpolate(li.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                enth1 = interpolate(li.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
            }


            if (ptable[i][k][4] == li.value) {
                kelvin2 = ptable[i][k][0];
                cube2 = ptable[i][k][1];
                joule2 = ptable[i][k][2];
                enth2 = ptable[i][k][3];
            }
            else {
                kelvin2 = interpolate(li.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][0], ptable[i][k][0]);
                cube2 = interpolate(li.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][1], ptable[i][k][1]);
                joule2 = interpolate(li.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][2], ptable[i][k][2]);
                enth2 = interpolate(li.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][3], ptable[i][k][3]);
            }

            kelvin = interpolate(fi.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            cube = interpolate(fi.value, atm[i - 1], atm[i], cube1, cube2);
            joule = interpolate(fi.value, atm[i - 1], atm[i], joule1, joule2);
            enth = interpolate(fi.value, atm[i - 1], atm[i], enth1, enth2);

        }

        element.innerText=(' Temperature = '+kelvin+'\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);

    }
//done


    else if (pp2.checked == true && ss1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0;
        for (i = 0; i < atm.length; i++) {
            if (atm[i] >= li.value)
                break;
        }
        //now atm[i] holds greater value or equal value to the input pressure 
        if (atm[i] == li.value) {
            let j = 0;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][4] >= fi.value)
                    break;
            }
            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature
            if (ptable[i][j][4] == fi.value) {
                kelvin = ptable[i][j][0];
                cube = ptable[i][j][1];
                joule = ptable[i][j][2];
                enth = ptable[i][j][3];
            }
            else {
                kelvin = interpolate(fi.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][0], ptable[i][j][0]);
                cube = interpolate(fi.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][1], ptable[i][j][1]);
                joule = interpolate(fi.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][2], ptable[i][j][2]);
                enth = interpolate(fi.value, ptable[i][j - 1][4], ptable[i][j][4], ptable[i][j - 1][3], ptable[i][j][3]);
            }
        }
        else {
            let j = 0, k = 0;
            for (j = 0; j < ptable[i - 1].length; j++) {
                if (ptable[i - 1][j][4] >= fi.value)
                    break;
            }
            for (k = 0; k < ptable[i].length; k++) {
                if (ptable[i][k][4] >= fi.value)
                    break;
            }


            //now ptable[i][j][0] holds temperature greater than or equal to the input temperature


            if (ptable[i - 1][j][4] == fi.value) {
                kelvin1 = ptable[i - 1][j][0];
                cube1 = ptable[i - 1][j][1];
                joule1 = ptable[i - 1][j][2];
                enth1 = ptable[i - 1][j][3];
            }
            else {
                kelvin1 = interpolate(fi.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][0], ptable[i - 1][j][0]);
                cube1 = interpolate(fi.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][1], ptable[i - 1][j][1]);
                joule1 = interpolate(fi.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][2], ptable[i - 1][j][2]);
                enth1 = interpolate(fi.value, ptable[i - 1][j - 1][4], ptable[i - 1][j][4], ptable[i - 1][j - 1][3], ptable[i - 1][j][3]);
            }


            if (ptable[i][k][4] == fi.value) {
                kelvin2 = ptable[i][k][0];
                cube2 = ptable[i][k][1];
                joule2 = ptable[i][k][2];
                enth2 = ptable[i][k][3];
            }
            else {
                kelvin2 = interpolate(fi.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][0], ptable[i][k][0]);
                cube2 = interpolate(fi.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][1], ptable[i][k][1]);
                joule2 = interpolate(fi.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][2], ptable[i][k][2]);
                enth2 = interpolate(fi.value, ptable[i][k - 1][4], ptable[i][k][4], ptable[i][k - 1][3], ptable[i][k][3]);
            }

            kelvin = interpolate(li.value, atm[i - 1], atm[i], kelvin1, kelvin2);
            cube = interpolate(li.value, atm[i - 1], atm[i], cube1, cube2);
            joule = interpolate(li.value, atm[i - 1], atm[i], joule1, joule2);
            enth = interpolate(li.value, atm[i - 1], atm[i], enth1, enth2);

        }

        element.innerText=(' Temperature = '+kelvin+'\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);

    }

    //pressure vs entropy plots dealt with

    else if (tt1.checked == true && vv2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == fi.value) {
                if (Math.abs(ptable[i][j][1] - li.value) <= 0.001) {
                    pascal = atm[i];
                    joule = ptable[i][j][2];
                    enth = ptable[i][j][3];
                    ent = ptable[i][j][4];
                    ch = true;
                }
            }
            else if (flag == true) {
                cube = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                console.log(cube + 'this');
                if (Math.abs(cube - li.value) <= 0.001) {
                    pascal = atm[i];
                    joule = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                    enth = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                    ent = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                    ch = true;
                }
            }
        }

        // console.log(pascal);
        // console.log(joule);
        // console.log(enth);
        // console.log(ent);

        element.innerText=(' Pressure = '+pascal+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);


    }


    else if (tt2.checked == true && vv1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == li.value) {
                if (Math.abs(ptable[i][j][1] - fi.value) <= 0.001) {
                    pascal = atm[i];
                    joule = ptable[i][j][2];
                    enth = ptable[i][j][3];
                    ent = ptable[i][j][4];
                    ch = true;
                }
            }
            else if (flag == true) {
                cube = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                console.log(cube + 'this');
                if (Math.abs(cube - fi.value) <= 0.001) {
                    pascal = atm[i];
                    joule = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                    enth = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                    ent = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);


    }

    // temperature vs specific volume handled

    else if (tt1.checked == true && uu2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == fi.value) {
                if (Math.abs(ptable[i][j][2] == li.value) <= 1) {
                    pascal = atm[i];
                    cube = ptable[i][j][1];
                    enth = ptable[i][j][3];
                    ent = ptable[i][j][4];
                    ch = true;
                }
            }
            else if (flag == true) {
                joule = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                console.log(cube + 'this');
                if (Math.abs(joule - li.value) <= 1) {
                    pascal = atm[i];
                    cube = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                    enth = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                    ent = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);


    }

    else if (tt2.checked == true && uu1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == li.value) {
                if (Math.abs(ptable[i][j][2] == fi.value) <= 1) {
                    pascal = atm[i];
                    cube = ptable[i][j][1];
                    enth = ptable[i][j][3];
                    ent = ptable[i][j][4];
                    ch = true;
                }
            }
            else if (flag == true) {
                joule = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                console.log(cube + 'this');
                if (Math.abs(joule - fi.value) <= 1) {
                    pascal = atm[i];
                    cube = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                    enth = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                    ent = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //temperature vs energy handled

    else if (tt1.checked == true && hh2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == fi.value) {
                if (Math.abs(ptable[i][j][3] - li.value) <= 1) {
                    pascal = atm[i];
                    cube = ptable[i][j][1];
                    joule = ptable[i][j][2];
                    ent = ptable[i][j][4];
                    ch = true;
                }
            }
            else if (flag == true) {
                enth = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                console.log(cube + 'this');
                if (Math.abs(enth - li.value) <= 1) {
                    pascal = atm[i];
                    cube = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                    joule = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                    ent = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Entropy = '+ent);


    }

    else if (tt2.checked == true && hh1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == li.value) {
                if (Math.abs(ptable[i][j][3] - fi.value) <= 1) {
                    pascal = atm[i];
                    cube = ptable[i][j][1];
                    joule = ptable[i][j][2];
                    ent = ptable[i][j][4];
                    ch = true;
                }
            }
            else if (flag == true) {
                enth = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                console.log(cube + 'this');
                if (Math.abs(enth - fi.value) <= 1) {
                    pascal = atm[i];
                    cube = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                    joule = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                    ent = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Entropy = '+ent);

    }

    //temperature vs enthalpy plots

    else if (tt1.checked == true && ss2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == fi.value) {
                if (Math.abs(ptable[i][j][4] - li.value) <= 0.1) {
                    pascal = atm[i];
                    cube = ptable[i][j][1];
                    joule = ptable[i][j][2];
                    enth = ptable[i][j][3];
                    ch = true;
                }
            }
            else if (flag == true) {
                ent = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                console.log(cube + 'this');
                if (Math.abs(ent - li.value) <= 0.01) {
                    pascal = atm[i];
                    cube = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                    joule = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                    enth = interpolate(fi.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);


    }

    else if (tt2.checked == true && ss1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

        //would deal with interpolation later
        let i = 0, ch = false;
        for (i = 0; i < atm.length && ch == false; i++) {
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                if (ptable[i][j][0] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][0] == li.value) {
                if (Math.abs(ptable[i][j][4] - fi.value) <= 0.1) {
                    pascal = atm[i];
                    cube = ptable[i][j][1];
                    joule = ptable[i][j][2];
                    enth = ptable[i][j][3];
                    ch = true;
                }
            }
            else if (flag == true) {
                ent = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][4], ptable[i][j][4]);
                console.log(cube + 'this');
                if (Math.abs(ent - fi.value) <= 0.01) {
                    pascal = atm[i];
                    cube = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][1], ptable[i][j][1]);
                    joule = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][2], ptable[i][j][2]);
                    enth = interpolate(li.value, ptable[i][j - 1][0], ptable[i][j][0], ptable[i][j - 1][3], ptable[i][j][3]);
                    ch = true;
                }
            }
        }

        element.innerText=(' Pressure = '+pascal+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);


    }


    //temperature vs entropy plots handled

    // else if (vv1.checked == true && uu2.checked == true) {
    //     let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
    //     let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;

    //     //would deal with interpolation later
    //     let i = 0, ch = false;
    //     for (i = 0; i < atm.length && ch == false; i++) {
    //         let j = 0, flag = false;
    //         for (j = 0; j < ptable[i].length; j++) {
    //             if (ptable[i][j][1] >= fi.value) {
    //                 break;
    //             }
    //         }
    //         if (ptable[i][j][1] == fi.value) {
    //             console.log('hell');
    //             if (Math.abs(ptable[i][j][2] - li.value) <= 1){
    //                 pascal = atm[i];
    //                 kelvin = ptable[i][j][0];
    //                 ent = ptable[i][j][4];
    //                 enth = ptable[i][j][3];
    //                 ch = true;
    //             }
    //         }
    //         else {
    //             joule = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
    //             console.log(cube + 'this');
    //             if (Math.abs(joule - li.value) <= 1) {
    //                 pascal = atm[i];
    //                 kelvin = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
    //                 ent = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
    //                 enth = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
    //                 ch = true;
    //             }
    //         }
    //     }

    //     console.log(pascal);
    //     console.log(kelvin);
    //     console.log(enth);
    //     console.log(ent);

    // }


    //specific volume vs internal energy plots done 


    else if (vv1.checked == true && uu2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][1] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][1] == fi.value) {
                if (Math.abs(ptable[i][j][2] - li.value) <= 1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    enth = ptable[i][j][3];
                    ch = true;
                    ent = ptable[i][j][4];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    joule = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                    if (Math.abs(joule - li.value) <= 1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                        enth = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                        ent = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    else if (vv2.checked == true && uu1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][1] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][1] == li.value) {
                if (Math.abs(ptable[i][j][2] -fi.value) <= 1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    enth = ptable[i][j][3];
                    ch = true;
                    ent = ptable[i][j][4];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    joule = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                    if (Math.abs(joule - fi.value) <= 1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                        enth = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                        ent = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Enthalpy = '+enth+ '\n Specific Entropy = '+ent);

    }

    //vol vs energy plots dealt with

    else if (vv1.checked == true && hh2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][1] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][1] == fi.value) {
                if (Math.abs(ptable[i][j][3] - li.value) <= 1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    joule = ptable[i][j][2];
                    ch = true;
                    ent = ptable[i][j][4];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    enth = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                    if (Math.abs(enth - li.value) <= 1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                        joule = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                        ent = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Entropy = '+ent);

    }

    else if (vv2.checked == true && hh1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][1] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][1] == li.value) {
                if (Math.abs(ptable[i][j][3] - fi.value) <= 1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    joule = ptable[i][j][2];
                    ch = true;
                    ent = ptable[i][j][4];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    enth = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                    if (Math.abs(enth - fi.value) <= 1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                        joule = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                        ent = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Entropy = '+ent);

    }

    //vol vs enthalpy dealt with

    else if (vv1.checked == true && ss2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][1] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][1] == fi.value) {
                if (Math.abs(ptable[i][j][4] - li.value) <= 0.1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    joule = ptable[i][j][2];
                    ch = true;
                    enth = ptable[i][j][3];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    ent = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
                    if (Math.abs(ent - li.value) <= 0.1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                        joule = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                        enth = interpolate(fi.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);

    }

    else if (vv2.checked == true && ss1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][1] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][1] == li.value) {
                if (Math.abs(ptable[i][j][4] - fi.value) <= 0.1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    joule = ptable[i][j][2];
                    ch = true;
                    enth = ptable[i][j][3];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    ent = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][4], ptable[i][j][4]);
                    if (Math.abs(ent - fi.value) <= 0.1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][0], ptable[i][j][0]);
                        joule = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][2], ptable[i][j][2]);
                        enth = interpolate(li.value, ptable[i][j - 1][1], ptable[i][j][1], ptable[i][j - 1][3], ptable[i][j][3]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Internal Energy = '+joule+ '\n Specific Enthalpy = '+enth);

    }

    //vol vs entropy dealt with


    else if (uu1.checked == true && hh2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][2] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][2] == fi.value) {
                if (Math.abs(ptable[i][j][3] - li.value) <= 1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    ent = ptable[i][j][4];
                    ch = true;
                    cube = ptable[i][j][1];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    enth = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][3], ptable[i][j][3]);
                    if (Math.abs(enth - li.value) <= 1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][0], ptable[i][j][0]);
                        cube = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][1], ptable[i][j][1]);
                        ent = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][4], ptable[i][j][4]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Entropy = '+ent);

    }


    else if (uu2.checked == true && hh1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][2] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][2] == li.value) {
                if (Math.abs(ptable[i][j][3] - fi.value) <= 1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    ent = ptable[i][j][4];
                    ch = true;
                    cube = ptable[i][j][1];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    enth = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][3], ptable[i][j][3]);
                    if (Math.abs(enth - fi.value) <= 1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][0], ptable[i][j][0]);
                        cube = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][1], ptable[i][j][1]);
                        ent = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][4], ptable[i][j][4]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Entropy = '+ent);

    }
    //energy vs enthalpy plots dealt with

    else if (uu1.checked == true && ss2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][2] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][2] == fi.value) {
                if (Math.abs(ptable[i][j][4] - li.value) <= 0.1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    enth = ptable[i][j][3];
                    ch = true;
                    cube = ptable[i][j][1];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    ent = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][4], ptable[i][j][4]);
                    if (Math.abs(ent - li.value) <= 0.1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][0], ptable[i][j][0]);
                        cube = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][1], ptable[i][j][1]);
                        enth = interpolate(fi.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][3], ptable[i][j][3]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth);

    }

    else if (uu2.checked == true && ss1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][2] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][2] == li.value) {
                if (Math.abs(ptable[i][j][4] - fi.value) <= 0.1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    enth = ptable[i][j][3];
                    ch = true;
                    cube = ptable[i][j][1];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    ent = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][4], ptable[i][j][4]);
                    if (Math.abs(ent - fi.value) <= 0.1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][0], ptable[i][j][0]);
                        cube = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][1], ptable[i][j][1]);
                        enth = interpolate(li.value, ptable[i][j - 1][2], ptable[i][j][2], ptable[i][j - 1][3], ptable[i][j][3]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Enthalpy = '+enth);

    }

    //energy vs entropy dealt with

    else if (hh1.checked == true && ss2.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][3] >= fi.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][3] == fi.value) {
                if (Math.abs(ptable[i][j][4] - li.value) <= 0.1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    joule = ptable[i][j][2];
                    ch = true;
                    cube = ptable[i][j][1];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    ent = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][4], ptable[i][j][4]);
                    if (Math.abs(ent - li.value) <= 0.1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][0], ptable[i][j][0]);
                        cube = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][1], ptable[i][j][1]);
                        joule = interpolate(fi.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][2], ptable[i][j][2]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule);

    }

    else if (hh2.checked == true && ss1.checked == true) {
        let kelvin = 0, pascal = 0, cube = 0, joule = 0, enth = 0, ent = 0;
        let kelvin1 = 0, kelvin2 = 0, cube1 = 0, cube2 = 0, joule1 = 0, joule2 = 0, enth1 = 0, enth2 = 0, ent1 = 0, ent2 = 0;
        let i = 0, ch = false;

        for (i = 0; i < atm.length && ch == false; i++) {
            // console.log('i is at' + i);
            let j = 0, flag = false;
            for (j = 0; j < ptable[i].length; j++) {
                // console.log('j is at' + j);
                if (ptable[i][j][3] >= li.value) {
                    flag = true;
                    break;
                }
            }
            if (flag == true && ptable[i][j][3] == li.value) {
                if (Math.abs(ptable[i][j][4] - fi.value) <= 0.1) {
                    pascal = atm[i];
                    kelvin = ptable[i][j][0];
                    joule = ptable[i][j][2];
                    ch = true;
                    cube = ptable[i][j][1];
                }
            }
            else if (flag == true) {
                if (j - 1 >= 0) {
                    ent = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][4], ptable[i][j][4]);
                    if (Math.abs(ent - fi.value) <= 0.1) {
                        pascal = atm[i];
                        ch = true;
                        kelvin = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][0], ptable[i][j][0]);
                        cube = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][1], ptable[i][j][1]);
                        joule = interpolate(li.value, ptable[i][j - 1][3], ptable[i][j][3], ptable[i][j - 1][2], ptable[i][j][2]);
                    }
                }
            }

        }

        element.innerText=(' Pressure = '+pascal+ '\n Temperature = '+kelvin+ '\n Specific Volume = '+cube+ '\n Specific Internal Energy = '+joule);

    }

    //enthalpy and entropy plots dealt with


};